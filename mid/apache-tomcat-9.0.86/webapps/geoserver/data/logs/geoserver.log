2024-04-27 23:29:56,496 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:29:56,512 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:29:57,909 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-27 23:29:58,521 INFO [org.geoserver] - Loading catalog...
2024-04-27 23:29:58,702 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-27 23:29:58,703 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-27 23:29:58,704 INFO [org.geoserver] - Loaded style 'poi'
2024-04-27 23:29:58,705 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-27 23:29:58,707 INFO [org.geoserver] - Loaded style 'burg'
2024-04-27 23:29:58,708 INFO [org.geoserver] - Loaded style 'population'
2024-04-27 23:29:58,708 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-27 23:29:58,709 INFO [org.geoserver] - Loaded style 'raster'
2024-04-27 23:29:58,710 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-27 23:29:58,711 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-27 23:29:58,712 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-27 23:29:58,713 INFO [org.geoserver] - Loaded style 'dem'
2024-04-27 23:29:58,714 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-27 23:29:58,714 INFO [org.geoserver] - Loaded style 'point'
2024-04-27 23:29:58,715 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-27 23:29:58,717 INFO [org.geoserver] - Loaded style 'green'
2024-04-27 23:29:58,717 INFO [org.geoserver] - Loaded style 'grass'
2024-04-27 23:29:58,719 INFO [org.geoserver] - Loaded style 'generic'
2024-04-27 23:29:58,720 INFO [org.geoserver] - Loaded style 'line'
2024-04-27 23:29:58,721 INFO [org.geoserver] - Loaded style 'rain'
2024-04-27 23:29:58,722 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-27 23:29:58,725 INFO [org.geoserver] - Loaded default workspace cite
2024-04-27 23:29:58,748 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-27 23:29:58,754 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-27 23:29:58,756 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-27 23:29:58,758 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-27 23:29:58,760 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-27 23:29:58,761 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-27 23:29:58,762 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-27 23:29:59,110 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-27 23:30:00,819 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-27 23:30:00,840 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-27 23:30:00,842 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-27 23:30:00,852 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-27 23:30:00,854 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-27 23:30:00,856 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-27 23:30:01,164 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-27 23:30:01,166 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-27 23:30:01,169 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-27 23:30:01,175 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-27 23:30:01,177 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-27 23:30:01,325 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-27 23:30:01,342 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-27 23:30:01,343 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-27 23:30:01,348 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-27 23:30:01,350 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-27 23:30:01,354 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-27 23:30:01,355 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-27 23:30:01,358 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-27 23:30:01,361 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-27 23:30:01,371 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-27 23:30:01,398 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-27 23:30:01,401 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-27 23:30:01,408 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-27 23:30:01,410 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-27 23:30:01,414 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-27 23:30:01,415 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-27 23:30:01,419 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-27 23:30:01,420 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-27 23:30:01,426 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-27 23:30:01,429 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-27 23:30:01,430 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-27 23:30:01,436 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-27 23:30:01,436 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-27 23:30:01,444 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-27 23:30:01,451 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-27 23:30:01,453 INFO [org.geoserver] - Loaded layer 'states'
2024-04-27 23:30:01,457 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-27 23:30:01,467 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-27 23:30:01,471 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-27 23:30:01,473 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-27 23:30:01,474 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-27 23:30:01,476 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-27 23:30:01,477 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-27 23:30:01,480 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-27 23:30:01,482 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-27 23:30:01,501 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-27 23:30:01,505 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-27 23:30:01,508 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-27 23:30:01,511 INFO [org.geoserver] - Read catalog in 2.988 s
2024-04-27 23:30:01,680 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--1c20e83c:18f20b6cb8e:-8000', enabled
2024-04-27 23:30:01,728 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-27 23:30:01,763 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-27 23:30:01,823 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-27 23:30:01,890 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:30:02,077 WARN [config.GeoserverXMLResourceProvider] - Found no configuration file in config directory, will create one at 'gwc/geowebcache.xml' from template jar:file:/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/WEB-INF/lib/gwc-core-1.19-SNAPSHOT.jar!/geowebcache_empty.xml
2024-04-27 23:30:02,082 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-27 23:30:02,082 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-27 23:30:02,135 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-27 23:30:02,135 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-27 23:30:02,135 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-27 23:30:02,135 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-27 23:30:02,204 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-27 23:30:02,205 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-27 23:30:02,257 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-27 23:30:02,257 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-27 23:30:02,258 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-27 23:30:02,263 INFO [gwc.layer] - Loaded 0 tile layers in 4.747 ms
2024-04-27 23:30:02,277 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-27 23:30:02,290 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-27 23:30:02,290 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-27 23:30:02,290 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-27 23:30:02,405 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-27 23:30:04,170 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:30:04,183 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:30:04,191 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-27 23:30:04,209 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-27 23:30:04,210 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-27 23:30:04,210 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-27 23:30:04,211 INFO [diskquota.DiskQuotaMonitor] - 22 layers attached to global quota 500.0 MB
2024-04-27 23:30:04,258 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-27 23:30:04,534 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-27 23:30:04,558 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-27 23:30:04,560 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-27 23:30:04,724 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-27 23:30:04,724 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-27 23:30:07,237 INFO [platform.resource] - Notifying ENTRY_CREATE change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 22, removed: 0, modified: 0
2024-04-27 23:30:10,191 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:30:10,247 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-27 23:30:12,734 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-27 23:30:12,735 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-27 23:30:13,615 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-27 23:30:13,620 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-27 23:30:32,551 INFO [geoserver.security] - Strong cryptography is available
2024-04-27 23:31:19,179 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:20,785 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:21,632 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70653438568115 : 40.712971687316895, -74.01986002922058 : -74.00052666664124]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-1807279129, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70653438568115,-74.01986002922058,40.712971687316895,-74.00052666664124, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:21,632 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.695762634277344 : 40.79875946044922, -74.13660049438477 : -73.82726669311523]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-1807279129, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.695762634277344,-74.13660049438477,40.79875946044922,-73.82726669311523, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:24,527 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:24,612 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70829391479492 : 40.73404312133789, -73.9795732498169 : -73.90223979949951]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-1807279129, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70829391479492,-73.9795732498169,40.73404312133789,-73.90223979949951, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:25,564 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:25,589 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.708208084106445 : 40.733957290649414, -73.9795732498169 : -73.90223979949951]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-1807279129, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.708208084106445,-73.9795732498169,40.733957290649414,-73.90223979949951, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:27,952 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:27,980 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70653438568115 : 40.712971687316895, -74.01986002922058 : -74.00052666664124]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-2098979340, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70653438568115,-74.01986002922058,40.712971687316895,-74.00052666664124, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:28,730 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:28,760 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70387363433838 : 40.71674823760986, -74.02894735336304 : -73.99028062820435]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-2098979340, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70387363433838,-74.02894735336304,40.71674823760986,-73.99028062820435, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:29,397 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:29,427 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70576190948486 : 40.712199211120605, -74.01859402656555 : -73.9992606639862]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-2098979340, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70576190948486,-74.01859402656555,40.712199211120605,-73.9992606639862, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:31,103 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:31:31,159 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70584774017334 : 40.71228504180908, -74.01825070381165 : -73.9989173412323]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-2098979340, STYLES=point, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=40.70584774017334,-74.01825070381165,40.71228504180908,-73.9989173412323, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-27 23:31:36,044 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,045 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,097 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,104 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,108 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,113 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,143 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,149 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,154 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,156 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,160 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,163 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,169 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,171 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,173 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:31:36,178 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:14,185 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,635 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state_1
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-27 23:33:14,652 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,652 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,652 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-27 23:33:14,655 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: apmc layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-27 23:33:14,652 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,660 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: cold_st layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-27 23:33:14,652 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,667 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state_1 layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-27 23:33:14,652 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,675 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: soil layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-27 23:33:14,655 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-27 23:33:14,691 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,697 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:cold_st
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-27 23:33:14,703 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,688 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,705 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:apmc
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-27 23:33:14,706 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:soil
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-27 23:33:14,725 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-27 23:33:14,730 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-27 23:33:15,574 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-27 23:33:57,616 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,617 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,617 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,618 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,618 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,618 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,618 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,618 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,637 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,640 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,647 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,652 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,662 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,665 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,667 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,670 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,672 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,674 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,677 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,681 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,684 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:33:57,688 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-27 23:35:01,786 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-27 23:35:01,787 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-27 23:35:01,788 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-27 23:35:01,788 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-27 23:35:01,788 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-27 23:35:01,790 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-27 23:35:01,791 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-27 23:35:01,791 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-27 23:35:01,792 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-27 23:35:01,792 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-27 23:35:01,792 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-27 23:35:01,802 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@130a0f66[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@76b0ae1b] rejected from java.util.concurrent.ThreadPoolExecutor@4c432866[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-27 23:35:01,804 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-27 23:53:00,220 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:53:00,234 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:53:01,232 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-27 23:53:01,903 INFO [org.geoserver] - Loading catalog...
2024-04-27 23:53:02,035 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-27 23:53:02,037 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-27 23:53:02,038 INFO [org.geoserver] - Loaded style 'poi'
2024-04-27 23:53:02,038 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-27 23:53:02,039 INFO [org.geoserver] - Loaded style 'burg'
2024-04-27 23:53:02,040 INFO [org.geoserver] - Loaded style 'population'
2024-04-27 23:53:02,041 INFO [org.geoserver] - Loaded style 'raster'
2024-04-27 23:53:02,042 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-27 23:53:02,043 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-27 23:53:02,044 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-27 23:53:02,046 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-27 23:53:02,047 INFO [org.geoserver] - Loaded style 'point'
2024-04-27 23:53:02,049 INFO [org.geoserver] - Loaded style 'grass'
2024-04-27 23:53:02,050 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-27 23:53:02,050 INFO [org.geoserver] - Loaded style 'dem'
2024-04-27 23:53:02,052 INFO [org.geoserver] - Loaded style 'green'
2024-04-27 23:53:02,054 INFO [org.geoserver] - Loaded style 'generic'
2024-04-27 23:53:02,055 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-27 23:53:02,056 INFO [org.geoserver] - Loaded style 'rain'
2024-04-27 23:53:02,056 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-27 23:53:02,057 INFO [org.geoserver] - Loaded style 'line'
2024-04-27 23:53:02,059 INFO [org.geoserver] - Loaded default workspace cite
2024-04-27 23:53:02,081 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-27 23:53:02,085 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-27 23:53:02,089 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-27 23:53:02,091 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-27 23:53:02,093 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-27 23:53:02,094 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-27 23:53:02,097 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-27 23:53:02,524 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-27 23:53:05,133 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-27 23:53:05,173 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-27 23:53:05,175 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-27 23:53:05,193 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-27 23:53:05,196 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-27 23:53:05,199 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-27 23:53:05,210 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-27 23:53:05,212 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-27 23:53:05,215 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-27 23:53:05,223 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-27 23:53:05,227 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-27 23:53:05,462 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-27 23:53:05,479 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-27 23:53:05,481 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-27 23:53:05,484 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-27 23:53:05,485 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-27 23:53:05,490 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-27 23:53:05,492 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-27 23:53:05,497 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-27 23:53:05,499 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-27 23:53:05,504 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-27 23:53:05,541 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-27 23:53:05,542 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-27 23:53:05,548 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-27 23:53:05,557 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-27 23:53:05,558 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-27 23:53:05,564 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-27 23:53:05,582 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-27 23:53:05,588 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-27 23:53:05,589 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-27 23:53:05,593 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-27 23:53:05,596 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-27 23:53:05,601 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-27 23:53:05,602 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-27 23:53:05,611 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-27 23:53:05,618 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-27 23:53:05,620 INFO [org.geoserver] - Loaded layer 'states'
2024-04-27 23:53:05,624 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-27 23:53:05,654 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-27 23:53:05,657 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-27 23:53:05,659 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-27 23:53:05,660 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-27 23:53:05,663 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-27 23:53:05,665 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-27 23:53:05,668 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-27 23:53:05,670 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-27 23:53:05,687 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-27 23:53:05,690 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-27 23:53:05,692 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-27 23:53:05,697 INFO [org.geoserver] - Read catalog in 3.791 s
2024-04-27 23:53:05,839 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--6110ffe8:18f20cbea6d:-8000', enabled
2024-04-27 23:53:05,855 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-27 23:53:05,865 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-27 23:53:05,887 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-27 23:53:05,921 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:53:06,014 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-27 23:53:06,015 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-27 23:53:06,015 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-27 23:53:06,078 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-27 23:53:06,079 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-27 23:53:06,079 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-27 23:53:06,079 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-27 23:53:06,141 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-27 23:53:06,145 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-27 23:53:06,210 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-27 23:53:06,211 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-27 23:53:06,211 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-27 23:53:06,248 INFO [gwc.layer] - Loaded 22 tile layers in 36.90 ms
2024-04-27 23:53:06,264 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-27 23:53:06,273 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-27 23:53:06,273 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-27 23:53:06,273 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-27 23:53:06,362 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-27 23:53:06,873 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:53:06,883 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-27 23:53:06,888 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-27 23:53:06,900 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-27 23:53:06,901 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-27 23:53:06,901 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-27 23:53:06,903 INFO [diskquota.DiskQuotaMonitor] - 22 layers attached to global quota 500.0 MB
2024-04-27 23:53:06,941 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-27 23:53:07,151 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-27 23:53:07,167 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-27 23:53:07,168 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-27 23:53:07,275 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-27 23:53:07,275 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-27 23:53:11,304 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-27 23:53:11,354 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-27 23:53:13,282 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-27 23:53:13,301 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-27 23:53:13,779 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-27 23:53:13,779 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-27 23:53:19,658 INFO [geoserver.security] - Strong cryptography is available
2024-04-27 23:59:41,746 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-27 23:59:41,749 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-27 23:59:41,752 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-27 23:59:41,753 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-27 23:59:41,753 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-27 23:59:41,758 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-27 23:59:41,758 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-27 23:59:41,759 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-27 23:59:41,760 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-27 23:59:41,760 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-27 23:59:41,761 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-27 23:59:41,779 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@42955c88[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@67d8293a] rejected from java.util.concurrent.ThreadPoolExecutor@5d7798de[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-27 23:59:41,783 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-28 09:55:40,662 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 09:55:40,673 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 09:55:41,510 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-28 09:55:41,912 INFO [org.geoserver] - Loading catalog...
2024-04-28 09:55:42,045 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-28 09:55:42,046 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-28 09:55:42,047 INFO [org.geoserver] - Loaded style 'burg'
2024-04-28 09:55:42,048 INFO [org.geoserver] - Loaded style 'population'
2024-04-28 09:55:42,049 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-28 09:55:42,050 INFO [org.geoserver] - Loaded style 'poi'
2024-04-28 09:55:42,051 INFO [org.geoserver] - Loaded style 'raster'
2024-04-28 09:55:42,053 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-28 09:55:42,054 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-28 09:55:42,055 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-28 09:55:42,056 INFO [org.geoserver] - Loaded style 'point'
2024-04-28 09:55:42,057 INFO [org.geoserver] - Loaded style 'dem'
2024-04-28 09:55:42,058 INFO [org.geoserver] - Loaded style 'green'
2024-04-28 09:55:42,059 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-28 09:55:42,059 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-28 09:55:42,062 INFO [org.geoserver] - Loaded style 'generic'
2024-04-28 09:55:42,063 INFO [org.geoserver] - Loaded style 'grass'
2024-04-28 09:55:42,064 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-28 09:55:42,064 INFO [org.geoserver] - Loaded style 'line'
2024-04-28 09:55:42,065 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-28 09:55:42,065 INFO [org.geoserver] - Loaded style 'rain'
2024-04-28 09:55:42,069 INFO [org.geoserver] - Loaded default workspace cite
2024-04-28 09:55:42,089 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-28 09:55:42,095 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-28 09:55:42,098 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-28 09:55:42,100 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-28 09:55:42,102 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-28 09:55:42,104 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-28 09:55:42,105 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-28 09:55:42,126 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-28 09:55:42,454 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-28 09:55:43,879 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-28 09:55:43,896 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-28 09:55:43,899 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-28 09:55:43,907 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-28 09:55:43,910 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-28 09:55:43,912 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-28 09:55:43,920 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-28 09:55:43,922 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-28 09:55:43,924 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-28 09:55:44,293 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-28 09:55:44,296 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-28 09:55:44,494 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-28 09:55:44,511 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-28 09:55:44,512 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-28 09:55:44,516 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-28 09:55:44,518 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-28 09:55:44,523 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-28 09:55:44,525 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-28 09:55:44,527 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-28 09:55:44,530 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-28 09:55:44,534 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-28 09:55:44,568 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-28 09:55:44,569 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-28 09:55:44,573 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-28 09:55:44,584 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-28 09:55:44,586 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-28 09:55:44,591 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-28 09:55:44,592 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-28 09:55:44,596 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-28 09:55:44,597 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-28 09:55:44,603 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-28 09:55:44,605 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-28 09:55:44,609 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-28 09:55:44,611 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-28 09:55:44,620 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-28 09:55:44,626 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-28 09:55:44,628 INFO [org.geoserver] - Loaded layer 'states'
2024-04-28 09:55:44,631 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-28 09:55:44,640 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-28 09:55:44,643 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-28 09:55:44,646 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-28 09:55:44,647 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-28 09:55:44,652 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-28 09:55:44,653 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-28 09:55:44,656 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-28 09:55:44,657 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-28 09:55:44,924 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-28 09:55:44,950 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-28 09:55:44,953 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-28 09:55:44,955 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-28 09:55:44,958 INFO [org.geoserver] - Read catalog in 3.045 s
2024-04-28 09:55:45,126 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-636356d7:18f22f3a9a5:-8000', enabled
2024-04-28 09:55:45,144 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-28 09:55:45,156 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-28 09:55:45,190 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-28 09:55:45,236 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 09:55:45,346 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 09:55:45,347 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 09:55:45,347 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 09:55:45,412 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 09:55:45,413 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-28 09:55:45,417 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-28 09:55:45,417 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 09:55:45,479 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-28 09:55:45,480 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-28 09:55:45,541 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-28 09:55:45,542 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-28 09:55:45,542 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-28 09:55:45,583 INFO [gwc.layer] - Loaded 22 tile layers in 40.10 ms
2024-04-28 09:55:45,593 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-28 09:55:45,605 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 09:55:45,605 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-28 09:55:45,605 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 09:55:45,690 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-28 09:55:46,185 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 09:55:46,194 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 09:55:46,198 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 09:55:46,208 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 09:55:46,210 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-28 09:55:46,210 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-28 09:55:46,212 INFO [diskquota.DiskQuotaMonitor] - 22 layers attached to global quota 500.0 MB
2024-04-28 09:55:46,271 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-28 09:55:46,478 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-28 09:55:46,496 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-28 09:55:46,497 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-28 09:55:46,605 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-28 09:55:46,605 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-28 09:55:50,666 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 09:55:50,708 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-28 09:55:52,854 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-28 09:55:52,859 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-28 09:55:53,112 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-28 09:55:53,113 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 09:55:55,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: apmc layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,429 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: cold_st layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state_1 layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state_1 layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: soil layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,428 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: cold_st layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,470 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,472 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: apmc layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,478 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,479 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: soil layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,484 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,485 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:55:55,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,500 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,528 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:55:55,578 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:apmc
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:55:55,578 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:cold_st
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:55:55,578 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:soil
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:55:55,578 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state_1
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:55:55,578 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:55:56,177 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 09:55:56,177 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 09:56:05,669 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:05,687 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:05,690 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:cold_st
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:05,695 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:05,678 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:05,691 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state_1
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:05,711 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:05,722 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:05,723 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:soil
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:05,712 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:apmc
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:19,918 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,955 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: cold_st layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:56:19,954 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,970 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 09:56:19,971 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 09:56:19,954 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,973 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: soil layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:56:19,938 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,921 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,974 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:56:19,976 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: apmc layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:56:19,976 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Can't obtain the schema for the required layer.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:200)
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:84)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.geoserver.platform.ServiceException: india_state_1 layer does not exist.
	at org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader.read(GetLegendGraphicKvpReader.java:191)
	... 102 more
2024-04-28 09:56:19,990 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,991 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state_1
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:19,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,993 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:cold_st
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:19,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:19,997 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:soil
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:20,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:20,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 09:56:20,013 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:india_state
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:20,021 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:apmc
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 09:56:42,058 INFO [geoserver.security] - Strong cryptography is available
2024-04-28 09:57:12,717 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:agro
2024-04-28 09:57:15,855 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 09:57:30,100 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:apmc
2024-04-28 09:57:30,874 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 09:57:48,571 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:cold_st
2024-04-28 09:57:50,892 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 09:59:35,850 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:india_state
2024-04-28 09:59:36,047 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 09:59:55,257 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:india_state_1
2024-04-28 09:59:56,071 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 10:00:06,196 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:00:11,187 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:11,204 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:11,214 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:11,216 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 10:00:11,216 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:11,222 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:11,224 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:12,074 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:00:12,075 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:00:12,082 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:00:12,096 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:00:12,096 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:00:12,120 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:00:12,122 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:00:12,130 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:12,131 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:12,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:12,226 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:00:12,978 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:00:12,978 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:00:12,978 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:00:14,148 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:00:16,065 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:02:47,677 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,686 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,688 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,686 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,685 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,684 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,698 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:02:47,700 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:02:47,700 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:02:47,693 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:02:47,718 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:02:47,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,724 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,731 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:02:47,773 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:02:47,774 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:02:49,655 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:02:49,725 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:02:49,805 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:02:50,494 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:02:51,743 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:06,995 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:06,998 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:06,997 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:06,997 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:06,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,010 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:07,006 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:07,006 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:07,004 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:07,004 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:07,053 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,053 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,053 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,100 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,101 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:07,169 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:03:07,170 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:03:07,390 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:07,440 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:07,493 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:08,352 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:09,515 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:13,431 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,431 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,433 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,433 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,434 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,437 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:13,438 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:13,437 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:13,437 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:13,438 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:13,495 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,496 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,495 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,498 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,501 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:13,569 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:03:13,570 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:03:13,912 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:13,960 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:14,010 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:14,698 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:15,968 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:22,497 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,501 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,503 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:22,505 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,511 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:22,512 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,513 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:22,510 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,517 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:22,521 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:22,670 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,674 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:03:22,675 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:03:22,676 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,681 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,686 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,691 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:22,754 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:22,754 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:22,760 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:23,505 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:24,561 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:35,388 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,389 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,390 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,392 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:35,389 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,392 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:35,393 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:35,394 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:35,389 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,401 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:35,459 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,462 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,462 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,462 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,464 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:35,628 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:03:35,629 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:03:35,661 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:35,664 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:35,708 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:36,792 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:38,002 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:45,814 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,817 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:45,821 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,824 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,825 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:45,826 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:45,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,838 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:45,850 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,858 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:03:45,889 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,892 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,895 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,895 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,904 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:03:45,995 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:03:45,996 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:03:46,206 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:46,212 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:46,298 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:46,924 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:03:47,952 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:03,703 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,705 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,706 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,708 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:03,703 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,712 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:03,712 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:03,718 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:03,724 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,726 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:03,765 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,781 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,792 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,800 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,802 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:03,894 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:03,930 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:06:03,931 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:06:03,985 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:04,130 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:05,269 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:06,357 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:16,414 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,417 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:16,419 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,421 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:16,426 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,431 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:16,442 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,442 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:06:16,443 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:06:16,444 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:16,445 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,473 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,485 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,488 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,489 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:06:16,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,503 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:06:16,741 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:16,780 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:16,786 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:17,344 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:06:18,245 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:08:06,081 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,084 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,087 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:08:06,137 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:08:06,138 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,142 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,143 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,143 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:08:06,144 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:08:06,142 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:08:06,161 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:08:06,166 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:08:06,172 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,176 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,201 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,201 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,221 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:08:06,273 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:08:06,280 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:08:06,322 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:08:07,389 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:08:08,201 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:10:48,995 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:48,998 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:48,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:48,999 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:10:49,000 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:10:48,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,007 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:10:48,995 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,008 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:10:49,009 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:10:49,082 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,083 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,083 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,083 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,090 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:10:49,250 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:10:49,250 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:10:49,324 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:10:49,333 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:10:49,412 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:10:50,353 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:10:51,280 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:11:02,059 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,059 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,062 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:11:02,066 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,070 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:11:02,073 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,075 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:11:02,082 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:11:02,096 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,123 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,117 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,111 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,111 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,106 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:11:02,206 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:11:02,228 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:11:02,228 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:11:02,274 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:11:02,284 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:11:02,316 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:11:03,080 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:11:04,120 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:12,765 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,770 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,777 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:12,772 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,783 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:12,772 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,785 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:12,772 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:12,778 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:12,845 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,845 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,847 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,850 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,859 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:12,907 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:12:12,909 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:12:12,977 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:13,008 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:13,010 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:13,533 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:14,526 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:28,856 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,858 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,858 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:28,949 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:28,959 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,960 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:12:28,961 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:12:28,969 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:28,977 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,978 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,952 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,993 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:28,997 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:29,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:28,979 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:29,034 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:29,170 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:29,260 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:29,357 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:29,735 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:30,973 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:50,312 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,322 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,322 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:50,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,327 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:50,319 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,328 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:50,329 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:50,314 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,333 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:12:50,393 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,393 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,394 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:12:50,515 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:12:50,516 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:12:50,564 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:50,606 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:50,665 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:51,442 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:12:52,471 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:25,335 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,336 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,346 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:25,348 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,340 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,399 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:25,340 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,419 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:25,419 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:14:25,419 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:14:25,409 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,432 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,399 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:25,397 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:25,432 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,484 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,541 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:25,671 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:25,672 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:25,682 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:26,561 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:27,465 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:37,197 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,198 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,198 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,200 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:37,200 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,202 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:37,205 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,205 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:37,206 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:37,208 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:14:37,253 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,253 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,286 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,349 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,352 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:14:37,353 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:14:37,361 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:14:37,411 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:37,411 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:37,411 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:38,149 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:14:39,159 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:14,697 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,708 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,703 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,711 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:14,711 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:14,716 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:14,719 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,701 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,722 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:14,723 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:14,774 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,780 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,785 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,787 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:14,869 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:16:14,871 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:16:14,940 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:14,970 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:14,985 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:15,836 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:17,126 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:25,013 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,066 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,067 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,067 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:25,069 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:25,092 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:16:25,092 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,092 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:16:25,024 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,098 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:25,098 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:25,108 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,108 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,108 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,192 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,194 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:25,205 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:25,386 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:25,425 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:25,530 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:26,418 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:27,574 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:51,958 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:51,962 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:51,959 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:51,966 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:51,966 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:51,966 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:51,975 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:51,976 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:51,977 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:51,979 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:16:52,024 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:52,024 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:52,026 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:52,028 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:52,030 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:16:52,231 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:16:52,232 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:16:52,441 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:52,441 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:52,474 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:53,497 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:16:54,517 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:17:01,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,112 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,112 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:17:01,113 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,113 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:17:01,114 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:17:01,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,118 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,120 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:17:01,124 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:17:01,176 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,176 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,178 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,179 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:17:01,266 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:17:01,286 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:17:01,289 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:17:01,368 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:17:01,377 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:17:02,435 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:17:03,542 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:42,715 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,717 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,716 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,715 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,719 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,721 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:42,722 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:42,721 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:42,724 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:42,726 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:42,762 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,762 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,769 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,770 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,779 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:42,838 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:18:42,844 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:18:43,061 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:43,114 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:43,133 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:43,855 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:44,816 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:57,147 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,149 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,154 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:57,157 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,160 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:57,161 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,165 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:57,166 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:57,178 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,190 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,192 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,220 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,244 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:18:57,246 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:18:57,280 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:18:57,280 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:18:57,372 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:57,466 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:57,510 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:58,076 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:18:58,863 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:33:54,031 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:33:54,037 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:33:58,893 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:33:59,063 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:02,207 INFO [gwc.layer] - Truncating default style for layer india:soil, as it changed from polygon to india:soil
2024-04-28 10:34:02,319 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.002 seconds
2024-04-28 10:34:02,319 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:34:02,320 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:34:02,320 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:34:02,322 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:34:02,653 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:34:03,022 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:34:07,658 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:34:13,505 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,505 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,507 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,512 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:13,513 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,507 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,515 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:13,516 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:13,516 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:13,548 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=soil, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:13,569 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,595 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,597 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,597 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,595 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:13,806 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:34:13,807 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:34:13,952 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:34:14,580 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:34:14,915 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:34:14,971 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:34:17,024 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:34:34,783 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:34:34,836 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:34:52,390 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:34:52,456 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:34:52,697 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:35:02,101 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:02,147 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:35:18,617 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:18,622 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:20,121 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:20,123 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:21,058 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:21,064 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:21,634 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:21,636 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:22,106 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:22,107 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:25,252 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:25,254 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:25,257 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:25,497 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[22.23544570803643 : 26.67392227053643, 70.07364320755005 : 74.51211977005005]
 layers: india:apmc
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=22.23544570803643,70.07364320755005,26.67392227053643,74.51211977005005, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-28 10:35:29,153 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:29,158 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:29,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:29,552 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:30,877 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:30,878 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader.read(GetFeatureInfoKvpReader.java:119)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:32,123 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:32,125 INFO [geoserver.wms] - 
Request: getCapabilities
	BaseUrl = http://localhost:8080/geoserver/
	Get = false
	Namespace = null
	RawKvp = {REQUEST=getCapabilities}
	Request = getCapabilities
	RequestCharset = null
	RootLayerEnabled = null
	UpdateSequence = null
	Version = 1.3.0
2024-04-28 10:35:44,390 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:44,400 INFO [geoserver.wms] - 
Request: getCapabilities
	BaseUrl = http://localhost:8080/geoserver/
	Get = false
	Namespace = null
	RawKvp = {REQUEST=getCapabilities}
	Request = getCapabilities
	RequestCharset = null
	RootLayerEnabled = null
	UpdateSequence = null
	Version = 1.3.0
2024-04-28 10:35:44,404 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:44,407 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:35:46,252 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:35:46,254 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:38:06,675 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:38:06,703 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:38:11,031 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:38:11,036 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=line, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:38:24,622 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:38:24,706 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:38:28,293 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:38:28,785 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:38:28,897 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:38:33,295 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,446 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,447 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,495 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,499 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,506 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,511 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,516 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,522 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,524 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,527 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,532 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,536 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,539 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,542 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,545 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,548 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,553 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,557 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,559 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,562 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,563 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:38,564 WARN [geoserver.web] - Unable to find property: 'format.wfs.text/csv' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2024-04-28 10:38:43,962 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:38:43,971 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:39:06,446 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:06,450 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:39:28,269 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:28,273 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:39:35,569 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:36,132 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7583508.0 : 1.0843391E7, 753607.8125 : 4452638.0]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@27732958]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=7583508.0,753607.8125,1.0843391E7,4452638.0, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=676, HEIGHT=768, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 676
2024-04-28 10:39:36,370 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:45,852 ERROR [renderer.lite] - Java heap space
java.lang.OutOfMemoryError: Java heap space
2024-04-28 10:39:45,859 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Rendering process failed. Layers: india_state
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:660)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:274)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:135)
	at org.geoserver.wms.GetMap.executeInternal(GetMap.java:740)
	at org.geoserver.wms.GetMap.run(GetMap.java:300)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at jdk.internal.reflect.GeneratedMethodAccessor385.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:56)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:32)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy107.getMap(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor342.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.Exception: java.lang.OutOfMemoryError: Java heap space
	at org.geotools.renderer.lite.StreamingRenderer.fireErrorEvent(StreamingRenderer.java:520)
	at org.geotools.renderer.lite.StreamingRenderer.processFeature(StreamingRenderer.java:2906)
	at org.geotools.renderer.lite.StreamingRenderer.drawPlain(StreamingRenderer.java:2656)
	at org.geotools.renderer.lite.StreamingRenderer.processStylers(StreamingRenderer.java:2276)
	at org.geotools.renderer.lite.StreamingRenderer.paint(StreamingRenderer.java:909)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:611)
	... 127 more
Caused by: java.lang.OutOfMemoryError: Java heap space
2024-04-28 10:39:48,585 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:48,746 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[68.12380981445312 : 97.4115982055664, 6.754077434539795 : 37.088348388671875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@17418a26]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=68.12380981445312,6.754077434539795,97.4115982055664,37.088348388671875, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=741, HEIGHT=768, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 741
2024-04-28 10:39:48,891 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:39:50,129 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[66.46728515625 : 99.03076171875, 5.0537109375 : 38.8037109375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@17418a26]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT=image/png, SRS=EPSG:4326, BBOX=66.46728515625,5.0537109375,99.03076171875,38.8037109375, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=741, HEIGHT=768, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 741
2024-04-28 10:40:22,396 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:40:22,400 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:40:26,346 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:40:26,365 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:40:31,410 ERROR [geoserver.web] - Error saving layer
java.lang.IllegalArgumentException: Resource named 'soil' already exists in store: 'india'
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:442)
	at org.geoserver.security.SecureCatalogImpl.validate(SecureCatalogImpl.java:1210)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.validate(AbstractFilteredCatalog.java:522)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.validate(AbstractCatalogDecorator.java:213)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:226)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:321)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmit(PublishedConfigurationPage.java:284)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:40:31,797 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:40:31,822 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:40:42,163 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_soil does not exist or is not writable
2024-04-28 10:40:45,919 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 1, modified: 0
2024-04-28 10:40:53,699 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:40:53,704 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:40:58,789 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:40:58,819 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=green, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=green, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=green, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:00,457 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:00,483 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:05,578 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:41:05,939 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 10:41:08,914 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,917 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:08,917 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,924 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,926 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:08,942 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,944 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:08,922 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,951 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:08,919 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:41:08,958 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:41:08,960 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,962 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:08,998 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=soil, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:09,014 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:09,015 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:09,020 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:41:09,037 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:09,230 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:09,239 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:09,294 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:11,049 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:13,148 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,150 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,184 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:13,148 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,204 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,216 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:41:13,217 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:41:13,185 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,184 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:13,217 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:13,251 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:13,260 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,262 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=soil, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:41:13,267 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,292 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,293 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,293 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:41:13,307 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:41:13,431 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:13,440 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:13,440 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:41:14,849 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:43:07,697 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_soil does not exist or is not writable
2024-04-28 10:43:11,199 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 1, modified: 0
2024-04-28 10:43:19,845 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:43:21,230 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 10:43:23,359 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,360 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,462 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:43:23,462 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:43:23,470 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,472 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,473 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,474 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:43:23,474 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:43:23,482 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,488 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:43:23,488 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:43:23,482 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,498 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,501 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,513 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:43:23,519 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:43:23,625 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:43:23,635 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:43:23,722 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:43:25,071 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:43:25,732 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:44:22,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:44:22,904 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:09,702 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,703 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,702 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,712 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,719 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:09,719 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:09,720 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:09,719 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:09,741 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,744 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:09,791 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,791 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,813 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,958 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,981 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:09,992 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:45:09,998 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:45:10,118 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:10,188 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:10,229 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:10,918 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:12,285 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:18,159 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,260 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:18,265 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,243 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,187 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,289 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:18,216 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,188 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,292 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:18,299 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:18,306 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,276 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:18,314 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,318 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,320 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:18,358 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:45:18,359 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:45:18,515 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:18,576 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:18,789 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:19,623 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:20,683 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:40,451 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,475 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,489 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,490 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:40,491 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=polygon, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:40,452 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,532 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:40,533 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:45:40,534 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:45:40,534 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:40,544 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,546 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:45:40,547 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,548 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,560 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,560 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,567 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:45:40,613 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:40,617 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:40,624 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:41,592 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:45:42,384 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:47:45,450 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:47:45,498 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:48:07,082 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:48:07,102 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=soil, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:soil, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:51:07,386 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:51:07,390 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:51:11,706 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:51:11,710 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:51:12,371 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:51:12,372 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:51:22,034 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:51:22,038 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:51:25,648 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:51:25,651 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:52:10,466 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:52:10,468 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:52:12,001 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:52:12,003 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:52:16,600 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:52:16,602 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:20,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:20,340 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:22,814 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:23,235 WARN [geoserver.ows] - Exception while getting SLD.
org.geoserver.platform.ServiceException: Unknown layer: ind_soil
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visitNamedLayerInternal(ProcessStandaloneSLDVisitor.java:74)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:173)
	at org.geotools.styling.NamedLayerImpl.accept(NamedLayerImpl.java:64)
	at org.geotools.styling.AbstractStyleVisitor.visit(AbstractStyleVisitor.java:35)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:165)
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visit(ProcessStandaloneSLDVisitor.java:55)
	at org.geotools.styling.StyledLayerDescriptorImpl.accept(StyledLayerDescriptorImpl.java:169)
	at org.geoserver.wms.map.GetMapKvpRequestReader.processSld(GetMapKvpRequestReader.java:949)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:469)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:23,237 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Error while getting SLD.
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:481)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:25,155 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:25,165 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:26,591 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:26,593 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:28,381 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:28,383 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:30,339 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:30,341 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:49,285 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:49,320 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:52,809 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:52,810 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:53:54,755 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:53:54,757 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:54:43,176 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:54:43,180 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:54:45,241 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:54:45,290 WARN [geoserver.ows] - Exception while getting SLD.
org.geoserver.platform.ServiceException: Unknown layer: ind_soil
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visitNamedLayerInternal(ProcessStandaloneSLDVisitor.java:74)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:173)
	at org.geotools.styling.NamedLayerImpl.accept(NamedLayerImpl.java:64)
	at org.geotools.styling.AbstractStyleVisitor.visit(AbstractStyleVisitor.java:35)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:165)
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visit(ProcessStandaloneSLDVisitor.java:55)
	at org.geotools.styling.StyledLayerDescriptorImpl.accept(StyledLayerDescriptorImpl.java:169)
	at org.geoserver.wms.map.GetMapKvpRequestReader.processSld(GetMapKvpRequestReader.java:949)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:469)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:54:45,290 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Error while getting SLD.
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:481)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:54:46,347 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:54:46,349 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:54:47,987 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:54:47,989 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:06,724 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:06,725 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:11,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:11,777 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:14,420 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:14,422 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:18,466 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:18,469 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:31,573 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:31,576 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:34,758 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:34,760 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:55:53,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:53,280 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.06851318478585 : 24.50698974728585, 69.10950708389282 : 73.54798364639282]
 layers: india:soil
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.06851318478585,69.10950708389282,24.50698974728585,73.54798364639282, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-28 10:55:53,715 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:55:54,641 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 73.4296875 : 124.0107421875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,73.4296875,39.72119140625001,124.0107421875, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:56:01,918 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:56:01,922 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:56:52,925 INFO [gwc.layer] - Truncating default style for layer india:soil, as it changed from polygon to india:soil
2024-04-28 10:56:52,931 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:56:52,931 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.001 seconds
2024-04-28 10:56:52,931 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:56:52,932 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:56:52,933 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:56:57,418 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:56:57,420 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:56:57,542 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:57:01,402 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:01,403 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:02,667 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:02,669 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:13,146 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:13,245 WARN [geoserver.ows] - Exception while getting SLD.
org.geoserver.platform.ServiceException: Unknown layer: ind_soil
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visitNamedLayerInternal(ProcessStandaloneSLDVisitor.java:74)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:173)
	at org.geotools.styling.NamedLayerImpl.accept(NamedLayerImpl.java:64)
	at org.geotools.styling.AbstractStyleVisitor.visit(AbstractStyleVisitor.java:35)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:165)
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visit(ProcessStandaloneSLDVisitor.java:55)
	at org.geotools.styling.StyledLayerDescriptorImpl.accept(StyledLayerDescriptorImpl.java:169)
	at org.geoserver.wms.map.GetMapKvpRequestReader.processSld(GetMapKvpRequestReader.java:949)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:469)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:13,246 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Error while getting SLD.
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:481)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:18,807 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:18,809 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:28,391 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:28,394 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:28,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:28,392 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:28,397 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'india:soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:28,408 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:28,484 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:28,881 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:28,881 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:31,157 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:52,329 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:52,339 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:52,984 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:52,986 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: The requested Style can not be used with this layer.  The style specifies an attribute named 'DOMSOI', not found in the 'soil' layer
	at org.geoserver.wms.map.GetMapKvpRequestReader.checkStyle(GetMapKvpRequestReader.java:1267)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:599)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 10:57:55,336 INFO [gwc.layer] - Truncating default style for layer india:soil, as it changed from india:soil to generic
2024-04-28 10:57:55,337 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:57:55,338 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:57:55,339 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:57:55,340 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 10:57:55,372 INFO [gwc.layer] - Truncating cached style india:soil of layer india:soil as it's no longer one of the layer's styles
2024-04-28 10:57:55,372 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:soil
2024-04-28 10:57:57,595 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 10:57:59,150 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,150 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,151 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,152 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:57:59,153 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:57:59,154 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,152 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:57:59,166 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,167 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:57:59,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,242 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,242 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:57:59,300 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 10:57:59,300 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 10:57:59,338 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:59,346 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:59,349 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:57:59,389 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 10:58:00,130 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:00,899 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:04,025 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:04,025 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:04,026 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:04,026 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:04,028 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:04,095 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.383213579654694 : 39.825596392154694, 57.346341490745544 : 107.92739617824554]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.383213579654694,57.346341490745544,39.825596392154694,107.92739617824554, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:04,143 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.383213579654694 : 39.825596392154694, 57.346341490745544 : 107.92739617824554]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.383213579654694,57.346341490745544,39.825596392154694,107.92739617824554, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:04,507 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.383213579654694 : 39.825596392154694, 57.346341490745544 : 107.92739617824554]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.383213579654694,57.346341490745544,39.825596392154694,107.92739617824554, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:04,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.383213579654694 : 39.825596392154694, 57.346341490745544 : 107.92739617824554]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.383213579654694,57.346341490745544,39.825596392154694,107.92739617824554, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:05,582 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.383213579654694 : 39.825596392154694, 57.346341490745544 : 107.92739617824554]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.383213579654694,57.346341490745544,39.825596392154694,107.92739617824554, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:18,908 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:19,276 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[9.47320693971092 : 42.91558975221092, 53.76199491770355 : 104.34304960520355]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=9.47320693971092,53.76199491770355,42.91558975221092,104.34304960520355, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:21,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:21,055 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.007737183407805 : 44.450119995907805, 93.31148599984823 : 143.89254068734823]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.007737183407805,93.31148599984823,44.450119995907805,143.89254068734823, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:23,016 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:23,360 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.846662147364206 : 40.289044959864206, 58.99143770364641 : 109.57249239114641]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.846662147364206,58.99143770364641,40.289044959864206,109.57249239114641, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:23,468 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:23,719 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.103033049425669 : 40.54541586192567, 57.90827587274431 : 108.48933056024431]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.103033049425669,57.90827587274431,40.54541586192567,108.48933056024431, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:24,803 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:25,141 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.366729064306803 : 40.8091118768068, 55.665345639265766 : 106.24640032676577]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.366729064306803,55.665345639265766,40.8091118768068,106.24640032676577, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:27,320 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:27,352 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.366729064306803 : 40.8091118768068, 55.665345639265766 : 106.24640032676577]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.366729064306803,55.665345639265766,40.8091118768068,106.24640032676577, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:28,038 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:28,090 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.366729064306803 : 40.8091118768068, 55.665345639265766 : 106.24640032676577]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.366729064306803,55.665345639265766,40.8091118768068,106.24640032676577, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:29,246 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:29,297 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.366729064306803 : 40.8091118768068, 55.665345639265766 : 106.24640032676577]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.366729064306803,55.665345639265766,40.8091118768068,106.24640032676577, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 10:58:30,159 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 10:58:31,381 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.366729064306803 : 40.8091118768068, 55.665345639265766 : 106.24640032676577]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.366729064306803,55.665345639265766,40.8091118768068,106.24640032676577, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:03:40,860 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:03:40,898 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:04:37,432 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:04:37,441 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:04:40,401 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:04:40,429 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:dist, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=dist, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:dist, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:04:47,422 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 11:04:48,160 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 11:05:26,235 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,236 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,238 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,243 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,244 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,245 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,244 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,253 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,260 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,261 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,273 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,274 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=dist, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:05:26,303 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,313 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,332 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,334 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,332 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,334 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:26,647 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:26,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:26,763 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:26,878 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 11:05:26,880 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 11:05:27,061 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:27,911 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:29,115 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:05:45,710 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:46,265 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810834.84375 : 3811256.71875, 4248107.578125 : 4249374.609375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810834.84375,4248107.578125,3811256.71875,4249374.609375, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:48,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:48,175 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810907.96875 : 3811118.90625, 4248388.4765625 : 4249021.9921875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810907.96875,4248388.4765625,3811118.90625,4249021.9921875, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:48,285 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:48,360 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810834.84375 : 3811256.71875, 4248108.984375 : 4249376.015625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810834.84375,4248108.984375,3811256.71875,4249376.015625, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:49,734 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:49,849 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810944.8828125 : 3811050.3515625, 4248571.46484375 : 4248888.22265625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810944.8828125,4248571.46484375,3811050.3515625,4248888.22265625, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:50,035 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:50,155 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810963.1640625 : 3811015.8984375, 4248648.720703125 : 4248807.099609375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810963.1640625,4248648.720703125,3811015.8984375,4248807.099609375, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:50,451 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:50,600 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810907.96875 : 3811118.90625, 4248417.3046875 : 4249050.8203125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810907.96875,4248417.3046875,3811118.90625,4249050.8203125, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:53,367 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:53,500 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810940.3125 : 3811151.25, 4248425.0390625 : 4249058.5546875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810940.3125,4248425.0390625,3811151.25,4249058.5546875, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:05:54,014 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:05:54,158 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3811032.7734375 : 3811059.140625, 4248702.2021484375 : 4248781.3916015625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3811032.7734375,4248702.2021484375,3811059.140625,4248781.3916015625, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:06:07,539 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:07,677 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810859.453125 : 3811070.390625, 4248500.9765625 : 4249134.4921875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=1777684515, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810859.453125,4248500.9765625,3811070.390625,4249134.4921875, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:06:10,647 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:10,678 WARN [geoserver.ows] - Exception while getting SLD.
org.geoserver.platform.ServiceException: Unknown layer: DISTRICT_BOUNDARY
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visitNamedLayerInternal(ProcessStandaloneSLDVisitor.java:74)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:173)
	at org.geotools.styling.NamedLayerImpl.accept(NamedLayerImpl.java:64)
	at org.geotools.styling.AbstractStyleVisitor.visit(AbstractStyleVisitor.java:35)
	at org.geoserver.catalog.GeoServerSLDVisitor.visit(GeoServerSLDVisitor.java:165)
	at org.geoserver.wms.map.ProcessStandaloneSLDVisitor.visit(ProcessStandaloneSLDVisitor.java:55)
	at org.geotools.styling.StyledLayerDescriptorImpl.accept(StyledLayerDescriptorImpl.java:169)
	at org.geoserver.wms.map.GetMapKvpRequestReader.processSld(GetMapKvpRequestReader.java:949)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:469)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 11:06:10,678 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Error while getting SLD.
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:481)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 11:06:11,773 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:11,857 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[3810834.84375 : 3811256.71875, 4248107.578125 : 4249374.609375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180, FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 600
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@896c993]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-1888355085, STYLES=india:dist, WIDTH=1802, HEIGHT=600, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=india:ind_district, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true;dpi:180, BBOX=3810834.84375,4248107.578125,3811256.71875,4249374.609375, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=dist]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1802
2024-04-28 11:06:45,875 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:45,880 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:dist, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=dist, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:dist, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:50,407 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:50,409 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=line, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:51,899 INFO [gwc.layer] - Truncating default style for layer india:ind_district, as it changed from india:dist to line
2024-04-28 11:06:51,927 WARN [operation.projection] - Possible use of "Mercator_1SP" projection outside its valid area.
Longitude 2818004°00.0'E is out of range (±180°).
Latitude 2177166°45.0'N is out of range (±90°).
2024-04-28 11:06:51,959 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:06:51,960 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.001 seconds
2024-04-28 11:06:51,960 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:06:51,961 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 11:06:51,961 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:06:52,054 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 11:06:53,386 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 11:06:54,715 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,734 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,734 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=line, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,754 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,756 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,760 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,764 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,765 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,760 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,760 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,774 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 11:06:54,775 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 11:06:54,775 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,779 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:06:54,800 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,881 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,884 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,914 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,914 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:54,999 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:06:55,007 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=line]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:06:55,016 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:06:55,299 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:06:55,299 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:06:55,964 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:06:57,111 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:04,868 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:04,870 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=line, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:05,192 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:05,194 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=line, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:10,435 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:10,436 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:12,628 INFO [gwc.layer] - Truncating default style for layer india:ind_district, as it changed from line to polygon
2024-04-28 11:07:12,631 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:07:12,632 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 11:07:12,632 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:07:12,632 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-28 11:07:12,636 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.004 seconds
2024-04-28 11:07:12,755 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 11:07:13,407 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-28 11:07:16,201 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,202 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,202 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,203 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,203 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,204 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,204 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,208 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,276 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,278 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 11:07:16,279 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 11:07:16,286 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,310 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,311 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,325 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@1c78a01f
2024-04-28 11:07:16,329 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,372 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:16,372 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:16,486 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 11:07:16,750 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:16,751 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:17,302 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:18,853 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 11:07:35,847 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-28 11:07:35,849 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-28 11:07:35,850 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-28 11:07:35,851 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-28 11:07:35,851 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-28 11:07:35,857 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-28 11:07:35,859 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-28 11:07:35,860 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-28 11:07:36,366 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-28 11:07:36,366 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-28 11:07:36,389 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@2f7359fc[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@ebb67ca] rejected from java.util.concurrent.ThreadPoolExecutor@3f15387c[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-28 11:07:36,394 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-28 18:59:44,353 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 18:59:44,369 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 18:59:45,340 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-28 18:59:45,768 INFO [org.geoserver] - Loading catalog...
2024-04-28 18:59:45,897 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-28 18:59:45,898 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-28 18:59:45,899 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-28 18:59:45,899 INFO [org.geoserver] - Loaded style 'burg'
2024-04-28 18:59:45,901 INFO [org.geoserver] - Loaded style 'population'
2024-04-28 18:59:45,902 INFO [org.geoserver] - Loaded style 'poi'
2024-04-28 18:59:45,903 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-28 18:59:45,904 INFO [org.geoserver] - Loaded style 'raster'
2024-04-28 18:59:45,905 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-28 18:59:45,906 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-28 18:59:45,907 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-28 18:59:45,907 INFO [org.geoserver] - Loaded style 'point'
2024-04-28 18:59:45,908 INFO [org.geoserver] - Loaded style 'green'
2024-04-28 18:59:45,909 INFO [org.geoserver] - Loaded style 'grass'
2024-04-28 18:59:45,910 INFO [org.geoserver] - Loaded style 'dem'
2024-04-28 18:59:45,912 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-28 18:59:45,912 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-28 18:59:45,913 INFO [org.geoserver] - Loaded style 'generic'
2024-04-28 18:59:45,914 INFO [org.geoserver] - Loaded style 'rain'
2024-04-28 18:59:45,914 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-28 18:59:45,915 INFO [org.geoserver] - Loaded style 'line'
2024-04-28 18:59:45,919 INFO [org.geoserver] - Loaded default workspace cite
2024-04-28 18:59:45,938 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-28 18:59:45,943 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-28 18:59:45,946 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-28 18:59:45,948 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-28 18:59:45,950 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-28 18:59:45,952 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-28 18:59:45,955 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-28 18:59:45,971 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-28 18:59:45,979 INFO [org.geoserver] - Loaded style 'soil'
2024-04-28 18:59:45,981 INFO [org.geoserver] - Loaded style 'dist'
2024-04-28 18:59:46,361 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-28 18:59:48,294 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-28 18:59:48,316 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-28 18:59:48,321 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-28 18:59:48,327 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-28 18:59:48,330 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-28 18:59:48,331 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-28 18:59:48,821 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-28 18:59:48,822 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-28 18:59:48,823 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-28 18:59:48,830 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-28 18:59:48,832 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-28 18:59:49,178 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-28 18:59:49,211 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-28 18:59:49,212 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-28 18:59:49,216 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-28 18:59:49,222 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-28 18:59:49,230 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-28 18:59:49,232 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-28 18:59:49,243 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-28 18:59:49,248 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-28 18:59:49,273 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-28 18:59:49,341 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-28 18:59:49,343 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-28 18:59:49,349 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-28 18:59:49,354 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-28 18:59:49,360 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-28 18:59:49,361 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-28 18:59:49,372 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-28 18:59:49,375 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-28 18:59:49,381 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-28 18:59:49,383 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-28 18:59:49,391 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-28 18:59:49,408 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-28 18:59:49,409 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-28 18:59:49,421 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-28 18:59:49,429 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-28 18:59:49,431 INFO [org.geoserver] - Loaded layer 'states'
2024-04-28 18:59:49,438 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-28 18:59:49,453 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-28 18:59:49,458 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-28 18:59:49,461 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-28 18:59:49,463 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-28 18:59:49,466 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-28 18:59:49,470 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-28 18:59:49,475 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-28 18:59:49,476 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-28 18:59:50,159 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-28 18:59:50,169 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-28 18:59:50,171 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-28 18:59:50,174 INFO [org.geoserver] - Loaded feature type 'india_state', enabled
2024-04-28 18:59:50,176 INFO [org.geoserver] - Loaded layer 'india_state'
2024-04-28 18:59:50,179 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-28 18:59:50,180 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-28 18:59:50,183 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-28 18:59:50,187 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-28 18:59:50,189 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-28 18:59:50,191 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-28 18:59:50,194 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-28 18:59:50,196 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-28 18:59:50,199 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-28 18:59:50,202 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-28 18:59:50,224 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-28 18:59:50,227 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-28 18:59:50,230 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-28 18:59:50,236 INFO [org.geoserver] - Read catalog in 4.463 s
2024-04-28 18:59:50,458 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--6f3307e9:18f24e5ca79:-8000', enabled
2024-04-28 18:59:50,489 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-28 18:59:50,510 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-28 18:59:50,546 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-28 18:59:50,590 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 18:59:50,723 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 18:59:50,724 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 18:59:50,724 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 18:59:50,814 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 18:59:50,814 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-28 18:59:50,814 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-28 18:59:50,814 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 18:59:50,883 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-28 18:59:50,886 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-28 18:59:50,960 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-28 18:59:50,961 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-28 18:59:50,961 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-28 18:59:50,998 INFO [gwc.layer] - Loaded 29 tile layers in 35.78 ms
2024-04-28 18:59:51,013 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-28 18:59:51,035 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 18:59:51,035 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-28 18:59:51,035 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 18:59:51,337 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-28 18:59:54,876 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 18:59:54,886 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 18:59:54,889 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 18:59:54,900 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 18:59:54,902 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-28 18:59:54,902 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-28 18:59:54,904 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2024-04-28 18:59:54,941 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-28 18:59:55,161 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-28 18:59:55,180 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-28 18:59:55,182 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-28 18:59:55,283 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-28 18:59:55,283 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-28 18:59:59,056 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 18:59:59,107 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-28 19:00:01,845 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-28 19:00:01,852 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-28 19:00:02,113 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-28 19:00:02,114 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:54,721 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:57,542 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:54:57,550 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:54:57,548 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state identified extends Feature(gid:gid,state_name:state_name,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state, name=www.india.com:india_state styleName=polygon, title=india_state, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:54:57,723 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 19:54:57,731 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:57,731 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:57,841 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:54:57,858 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:58,132 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:54:58,148 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:54:58,905 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:54:59,263 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:54:59,269 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:54:59,410 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 19:55:00,304 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:55:00,323 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:55:00,430 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@6f86abb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:55:01,501 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:55:01,722 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:55:02,199 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:13,205 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,209 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,206 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,212 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,213 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:57:13,221 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:57:13,221 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:57:13,228 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:57:13,253 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 19:57:13,256 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 19:57:13,264 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,270 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:57:13,275 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,335 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,373 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:57:13,627 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:14,281 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:15,019 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:15,475 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:16,640 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:57:50,856 INFO [geoserver.security] - Strong cryptography is available
2024-04-28 19:58:09,785 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_ind_district does not exist or is not writable
2024-04-28 19:58:09,845 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_india_state does not exist or is not writable
2024-04-28 19:58:11,300 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 2, modified: 0
2024-04-28 19:58:23,730 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 19:58:26,314 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 19:58:28,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,332 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:28,364 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,365 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,371 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:28,375 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:28,378 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,381 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:28,403 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,415 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,416 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,420 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,415 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,438 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:28,441 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:28,515 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 19:58:28,518 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 19:58:28,623 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:28,629 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:28,677 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:29,775 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:30,726 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:39,707 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,714 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,715 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,716 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:39,707 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,718 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,721 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:39,739 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:39,718 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:39,790 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,808 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,813 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,820 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,821 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 19:58:39,835 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@136c7068
2024-04-28 19:58:39,860 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 19:58:39,863 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 19:58:40,019 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:40,042 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:40,068 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:40,815 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:41,914 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 19:58:49,836 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-28 19:58:49,837 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-28 19:58:49,843 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-28 19:58:49,844 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-28 19:58:49,844 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-28 19:58:49,847 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-28 19:58:49,847 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-28 19:58:49,850 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-28 19:58:49,852 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-28 19:58:49,852 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-28 19:58:49,853 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-28 19:58:49,867 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@31cd2e51[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@49eb8e77] rejected from java.util.concurrent.ThreadPoolExecutor@6033f263[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-28 19:58:49,871 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-28 19:59:09,076 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 19:59:09,087 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 19:59:09,893 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-28 19:59:10,290 INFO [org.geoserver] - Loading catalog...
2024-04-28 19:59:10,403 INFO [org.geoserver] - Loaded style 'burg'
2024-04-28 19:59:10,405 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-28 19:59:10,406 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-28 19:59:10,407 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-28 19:59:10,408 INFO [org.geoserver] - Loaded style 'poi'
2024-04-28 19:59:10,409 INFO [org.geoserver] - Loaded style 'population'
2024-04-28 19:59:10,411 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-28 19:59:10,412 INFO [org.geoserver] - Loaded style 'raster'
2024-04-28 19:59:10,412 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-28 19:59:10,413 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-28 19:59:10,414 INFO [org.geoserver] - Loaded style 'point'
2024-04-28 19:59:10,414 INFO [org.geoserver] - Loaded style 'grass'
2024-04-28 19:59:10,415 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-28 19:59:10,416 INFO [org.geoserver] - Loaded style 'dem'
2024-04-28 19:59:10,416 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-28 19:59:10,418 INFO [org.geoserver] - Loaded style 'green'
2024-04-28 19:59:10,421 INFO [org.geoserver] - Loaded style 'generic'
2024-04-28 19:59:10,422 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-28 19:59:10,423 INFO [org.geoserver] - Loaded style 'line'
2024-04-28 19:59:10,423 INFO [org.geoserver] - Loaded style 'rain'
2024-04-28 19:59:10,424 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-28 19:59:10,427 INFO [org.geoserver] - Loaded default workspace cite
2024-04-28 19:59:10,448 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-28 19:59:10,452 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-28 19:59:10,456 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-28 19:59:10,458 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-28 19:59:10,475 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-28 19:59:10,484 INFO [org.geoserver] - Loaded style 'dist'
2024-04-28 19:59:10,486 INFO [org.geoserver] - Loaded style 'soil'
2024-04-28 19:59:10,488 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-28 19:59:10,491 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-28 19:59:10,493 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-28 19:59:10,804 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-28 19:59:12,086 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-28 19:59:12,107 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-28 19:59:12,109 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-28 19:59:12,117 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-28 19:59:12,119 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-28 19:59:12,120 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-28 19:59:12,511 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-28 19:59:12,513 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-28 19:59:12,515 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-28 19:59:12,523 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-28 19:59:12,525 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-28 19:59:12,667 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-28 19:59:12,682 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-28 19:59:12,684 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-28 19:59:12,689 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-28 19:59:12,690 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-28 19:59:12,693 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-28 19:59:12,695 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-28 19:59:12,699 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-28 19:59:12,701 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-28 19:59:12,740 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-28 19:59:12,782 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-28 19:59:12,783 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-28 19:59:12,790 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-28 19:59:12,792 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-28 19:59:12,799 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-28 19:59:12,800 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-28 19:59:12,806 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-28 19:59:12,807 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-28 19:59:12,811 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-28 19:59:12,812 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-28 19:59:12,815 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-28 19:59:12,822 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-28 19:59:12,823 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-28 19:59:12,829 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-28 19:59:12,838 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-28 19:59:12,839 INFO [org.geoserver] - Loaded layer 'states'
2024-04-28 19:59:12,843 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-28 19:59:12,855 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-28 19:59:12,858 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-28 19:59:12,862 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-28 19:59:12,863 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-28 19:59:12,867 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-28 19:59:12,868 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-28 19:59:12,874 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-28 19:59:12,875 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-28 19:59:13,138 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-28 19:59:13,152 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-28 19:59:13,154 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-28 19:59:13,158 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-28 19:59:13,160 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-28 19:59:13,162 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-28 19:59:13,164 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-28 19:59:13,168 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-28 19:59:13,170 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-28 19:59:13,174 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-28 19:59:13,176 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-28 19:59:13,179 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-28 19:59:13,180 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-28 19:59:13,198 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-28 19:59:13,200 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-28 19:59:13,204 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-28 19:59:13,209 INFO [org.geoserver] - Read catalog in 2.917 s
2024-04-28 19:59:13,368 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--1652c4e2:18f251c2818:-8000', enabled
2024-04-28 19:59:13,388 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-28 19:59:13,396 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-28 19:59:13,423 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-28 19:59:13,455 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 19:59:13,546 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 19:59:13,546 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 19:59:13,546 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 19:59:13,599 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 19:59:13,599 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-28 19:59:13,599 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-28 19:59:13,599 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 19:59:13,654 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-28 19:59:13,655 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-28 19:59:13,712 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-28 19:59:13,713 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-28 19:59:13,713 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-28 19:59:13,768 INFO [gwc.layer] - Loaded 28 tile layers in 54.93 ms
2024-04-28 19:59:13,783 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-28 19:59:13,793 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 19:59:13,794 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-28 19:59:13,794 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 19:59:13,891 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-28 19:59:14,514 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 19:59:14,527 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 19:59:14,530 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 19:59:14,545 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 19:59:14,546 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-28 19:59:14,546 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-28 19:59:14,548 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-28 19:59:14,596 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-28 19:59:14,874 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-28 19:59:14,899 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-28 19:59:14,900 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-28 19:59:15,028 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-28 19:59:15,028 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-28 19:59:18,846 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 19:59:18,890 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-28 19:59:20,520 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-28 19:59:20,523 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-28 19:59:20,700 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-28 19:59:20,701 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-28 20:00:31,802 INFO [geoserver.security] - Strong cryptography is available
2024-04-28 20:00:42,829 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:42,832 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:42,832 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:42,832 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:42,833 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 20:00:42,835 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:43,651 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 20:00:45,246 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:00:45,252 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:00:45,252 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:00:45,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:45,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:45,337 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:00:45,352 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:45,353 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:45,353 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:00:46,577 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:00:46,715 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:00:46,765 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:00:47,254 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:00:48,402 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:00:49,363 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:01:38,506 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:01:38,569 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=generic, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=generic, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=generic, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@39372452
2024-04-28 20:01:53,496 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_ind_district does not exist or is not writable
2024-04-28 20:01:53,856 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 1, modified: 0
2024-04-28 20:06:45,852 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-28 20:06:45,855 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-28 20:06:45,857 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-28 20:06:45,858 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-28 20:06:45,859 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-28 20:06:45,864 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-28 20:06:45,864 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-28 20:06:45,867 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-28 20:06:45,869 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-28 20:06:45,869 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-28 20:06:45,870 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-28 20:06:45,888 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@31460b92[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@2eb174a] rejected from java.util.concurrent.ThreadPoolExecutor@77f22aa9[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-28 20:06:45,891 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-28 20:07:18,208 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 20:07:18,218 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 20:07:19,204 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-28 20:07:19,616 INFO [org.geoserver] - Loading catalog...
2024-04-28 20:07:19,712 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-28 20:07:19,713 INFO [org.geoserver] - Loaded style 'burg'
2024-04-28 20:07:19,713 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-28 20:07:19,714 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-28 20:07:19,715 INFO [org.geoserver] - Loaded style 'poi'
2024-04-28 20:07:19,715 INFO [org.geoserver] - Loaded style 'population'
2024-04-28 20:07:19,716 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-28 20:07:19,716 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-28 20:07:19,717 INFO [org.geoserver] - Loaded style 'raster'
2024-04-28 20:07:19,717 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-28 20:07:19,718 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-28 20:07:19,718 INFO [org.geoserver] - Loaded style 'point'
2024-04-28 20:07:19,719 INFO [org.geoserver] - Loaded style 'grass'
2024-04-28 20:07:19,720 INFO [org.geoserver] - Loaded style 'dem'
2024-04-28 20:07:19,721 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-28 20:07:19,726 INFO [org.geoserver] - Loaded style 'green'
2024-04-28 20:07:19,727 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-28 20:07:19,728 INFO [org.geoserver] - Loaded style 'generic'
2024-04-28 20:07:19,729 INFO [org.geoserver] - Loaded style 'line'
2024-04-28 20:07:19,730 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-28 20:07:19,731 INFO [org.geoserver] - Loaded style 'rain'
2024-04-28 20:07:19,733 INFO [org.geoserver] - Loaded default workspace cite
2024-04-28 20:07:19,753 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-28 20:07:19,760 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-28 20:07:19,763 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-28 20:07:19,764 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-28 20:07:19,765 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-28 20:07:19,766 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-28 20:07:19,768 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-28 20:07:19,785 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-28 20:07:19,800 INFO [org.geoserver] - Loaded style 'dist'
2024-04-28 20:07:19,802 INFO [org.geoserver] - Loaded style 'soil'
2024-04-28 20:07:20,168 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-28 20:07:21,674 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-28 20:07:21,697 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-28 20:07:21,699 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-28 20:07:21,712 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-28 20:07:21,713 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-28 20:07:21,715 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-28 20:07:22,082 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-28 20:07:22,084 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-28 20:07:22,088 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-28 20:07:22,096 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-28 20:07:22,100 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-28 20:07:22,267 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-28 20:07:22,289 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-28 20:07:22,291 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-28 20:07:22,296 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-28 20:07:22,298 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-28 20:07:22,302 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-28 20:07:22,306 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-28 20:07:22,310 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-28 20:07:22,314 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-28 20:07:22,323 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-28 20:07:22,360 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-28 20:07:22,362 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-28 20:07:22,367 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-28 20:07:22,373 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-28 20:07:22,380 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-28 20:07:22,381 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-28 20:07:22,387 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-28 20:07:22,389 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-28 20:07:22,397 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-28 20:07:22,399 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-28 20:07:22,400 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-28 20:07:22,409 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-28 20:07:22,410 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-28 20:07:22,421 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-28 20:07:22,429 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-28 20:07:22,430 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-28 20:07:22,439 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-28 20:07:22,443 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-28 20:07:22,447 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-28 20:07:22,448 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-28 20:07:22,452 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-28 20:07:22,454 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-28 20:07:22,459 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-28 20:07:22,466 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-28 20:07:22,468 INFO [org.geoserver] - Loaded layer 'states'
2024-04-28 20:07:22,775 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-28 20:07:22,811 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-28 20:07:22,815 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-28 20:07:22,821 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-28 20:07:22,822 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-28 20:07:22,825 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-28 20:07:22,828 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-28 20:07:22,832 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-28 20:07:22,833 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-28 20:07:22,837 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-28 20:07:22,839 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-28 20:07:22,858 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-28 20:07:22,860 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-28 20:07:22,862 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-28 20:07:22,867 INFO [org.geoserver] - Read catalog in 3.249 s
2024-04-28 20:07:23,068 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--37506c31:18f2523a0fc:-8000', enabled
2024-04-28 20:07:23,107 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-28 20:07:23,116 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-28 20:07:23,150 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-28 20:07:23,196 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 20:07:23,315 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 20:07:23,315 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 20:07:23,316 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-28 20:07:23,389 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 20:07:23,389 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-28 20:07:23,390 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-28 20:07:23,390 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-28 20:07:23,453 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-28 20:07:23,455 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-28 20:07:23,516 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-28 20:07:23,516 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-28 20:07:23,516 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-28 20:07:23,561 INFO [gwc.layer] - Loaded 27 tile layers in 44.78 ms
2024-04-28 20:07:23,582 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-28 20:07:23,595 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 20:07:23,595 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-28 20:07:23,595 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-28 20:07:23,699 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-28 20:07:24,333 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 20:07:24,344 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-28 20:07:24,348 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 20:07:24,362 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-28 20:07:24,363 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-28 20:07:24,364 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-28 20:07:24,366 INFO [diskquota.DiskQuotaMonitor] - 27 layers attached to global quota 500.0 MB
2024-04-28 20:07:24,417 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-28 20:07:24,684 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-28 20:07:24,706 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-28 20:07:24,707 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-28 20:07:24,839 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-28 20:07:24,840 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-28 20:07:29,135 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-28 20:07:29,187 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-28 20:07:31,101 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-28 20:07:31,107 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-28 20:07:31,308 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-28 20:07:31,309 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-28 20:09:26,658 INFO [geoserver.security] - Strong cryptography is available
2024-04-28 20:09:46,287 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-28 20:09:48,648 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-28 20:09:51,054 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:51,058 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:51,059 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:51,058 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:51,058 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:51,144 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 20:09:51,958 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:09:51,959 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:09:51,959 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:09:51,972 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:09:52,081 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:52,081 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:52,380 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 20:09:52,671 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:09:52,990 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:52,997 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:53,007 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:09:53,216 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:09:53,507 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:09:54,531 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:09:55,188 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:09:56,235 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:10:42,976 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:10:42,982 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 20:10:43,765 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:10:43,770 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not find layer india:giant_polygon
	at org.geoserver.wms.map.GetMapKvpRequestReader.parseLayers(GetMapKvpRequestReader.java:1333)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:317)
	at org.geoserver.wms.map.GetMapKvpRequestReader.read(GetMapKvpRequestReader.java:97)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1528)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:691)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-28 20:11:49,631 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,641 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,641 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,648 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,656 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:11:49,656 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:11:49,657 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:11:49,660 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,662 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:11:49,667 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@404ea550
2024-04-28 20:11:49,726 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,734 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,736 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,741 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,741 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-28 20:11:49,901 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-28 20:11:49,902 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-28 20:11:49,971 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:11:50,058 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:11:50,127 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:11:51,293 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:11:52,651 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-28 20:36:28,268 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-28 20:36:28,271 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-28 20:36:28,274 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-28 20:36:28,274 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-28 20:36:28,274 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-28 20:36:28,287 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-28 20:36:28,287 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-28 20:36:28,295 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-28 20:36:28,296 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-28 20:36:28,297 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-28 20:36:28,297 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-28 20:36:28,320 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@205d9b5b[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@5393dd6] rejected from java.util.concurrent.ThreadPoolExecutor@2810ab17[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-28 20:36:28,326 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-29 08:51:45,242 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 08:51:45,261 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 08:51:46,756 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-29 08:51:47,591 INFO [org.geoserver] - Loading catalog...
2024-04-29 08:51:47,791 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-29 08:51:47,792 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-29 08:51:47,792 INFO [org.geoserver] - Loaded style 'burg'
2024-04-29 08:51:47,795 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-29 08:51:47,798 INFO [org.geoserver] - Loaded style 'population'
2024-04-29 08:51:47,799 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-29 08:51:47,800 INFO [org.geoserver] - Loaded style 'poi'
2024-04-29 08:51:47,800 INFO [org.geoserver] - Loaded style 'raster'
2024-04-29 08:51:47,801 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-29 08:51:47,802 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-29 08:51:47,804 INFO [org.geoserver] - Loaded style 'point'
2024-04-29 08:51:47,805 INFO [org.geoserver] - Loaded style 'dem'
2024-04-29 08:51:47,807 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-29 08:51:47,808 INFO [org.geoserver] - Loaded style 'grass'
2024-04-29 08:51:47,809 INFO [org.geoserver] - Loaded style 'green'
2024-04-29 08:51:47,816 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-29 08:51:47,817 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-29 08:51:47,818 INFO [org.geoserver] - Loaded style 'line'
2024-04-29 08:51:47,824 INFO [org.geoserver] - Loaded style 'rain'
2024-04-29 08:51:47,825 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-29 08:51:47,827 INFO [org.geoserver] - Loaded style 'generic'
2024-04-29 08:51:47,831 INFO [org.geoserver] - Loaded default workspace cite
2024-04-29 08:51:47,893 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-29 08:51:47,900 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-29 08:51:47,907 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-29 08:51:47,915 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-29 08:51:47,917 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-29 08:51:47,920 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-29 08:51:47,925 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-29 08:51:48,053 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-29 08:51:48,061 INFO [org.geoserver] - Loaded style 'soil'
2024-04-29 08:51:49,288 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-29 08:51:51,999 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-29 08:51:52,035 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-29 08:51:52,038 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-29 08:51:52,048 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-29 08:51:52,050 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-29 08:51:52,052 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-29 08:51:52,063 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-29 08:51:52,066 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-29 08:51:52,092 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-29 08:51:52,811 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-29 08:51:52,815 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-29 08:51:53,176 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-29 08:51:53,200 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-29 08:51:53,202 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-29 08:51:53,228 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-29 08:51:53,231 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-29 08:51:53,240 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-29 08:51:53,241 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-29 08:51:53,250 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-29 08:51:53,255 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-29 08:51:53,268 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-29 08:51:53,328 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-29 08:51:53,329 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-29 08:51:53,335 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-29 08:51:53,362 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-29 08:51:53,363 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-29 08:51:53,368 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-29 08:51:53,371 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-29 08:51:53,377 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-29 08:51:53,378 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-29 08:51:53,383 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-29 08:51:53,386 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-29 08:51:53,392 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-29 08:51:53,394 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-29 08:51:53,405 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-29 08:51:53,417 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-29 08:51:53,419 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-29 08:51:53,424 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-29 08:51:53,431 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-29 08:51:53,435 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-29 08:51:53,436 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-29 08:51:53,441 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-29 08:51:53,444 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-29 08:51:53,451 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-29 08:51:53,458 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-29 08:51:53,460 INFO [org.geoserver] - Loaded layer 'states'
2024-04-29 08:51:53,824 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-29 08:51:53,833 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-29 08:51:53,836 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-29 08:51:53,839 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-29 08:51:53,841 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-29 08:51:53,845 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-29 08:51:53,848 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-29 08:51:53,852 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-29 08:51:53,854 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-29 08:51:53,857 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-29 08:51:53,858 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-29 08:51:53,861 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-29 08:51:53,863 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-29 08:51:53,880 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-29 08:51:53,884 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-29 08:51:53,888 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-29 08:51:53,893 INFO [org.geoserver] - Read catalog in 6.299 s
2024-04-29 08:51:54,090 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--3a8ff28f:18f27df90a9:-8000', enabled
2024-04-29 08:51:54,121 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-29 08:51:54,131 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-29 08:51:54,163 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-29 08:51:54,209 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 08:51:54,322 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 08:51:54,323 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 08:51:54,323 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 08:51:54,403 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 08:51:54,403 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-29 08:51:54,403 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-29 08:51:54,403 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 08:51:54,473 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-29 08:51:54,475 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-29 08:51:54,546 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-29 08:51:54,546 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-29 08:51:54,546 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-29 08:51:54,593 INFO [gwc.layer] - Loaded 28 tile layers in 45.44 ms
2024-04-29 08:51:54,605 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-29 08:51:54,615 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 08:51:54,615 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-29 08:51:54,616 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 08:51:54,714 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-29 08:51:55,271 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 08:51:55,281 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 08:51:55,286 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 08:51:55,300 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 08:51:55,302 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-29 08:51:55,302 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-29 08:51:55,304 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-29 08:51:55,350 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-29 08:51:55,596 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-29 08:51:55,615 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-29 08:51:55,617 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-29 08:51:55,734 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-29 08:51:55,734 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-29 08:52:00,157 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 08:52:00,210 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-29 08:52:02,339 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-29 08:52:02,344 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-29 08:52:02,538 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-29 08:52:02,539 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-29 09:20:00,752 INFO [geoserver.security] - Strong cryptography is available
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:17,124 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:20,243 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,district:district,state:state,remarks:remarks,state_lgd:state_lgd,district_l:district_l,shape_leng:shape_leng,shape_area:shape_area,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:20:20,243 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:20:20,249 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:20:20,250 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:20:20,365 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:20:20,365 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:20,372 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:20,397 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:20,834 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:20:21,109 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:20:21,109 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:20:21,264 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:20:21,571 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:20:22,936 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:20:23,440 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:20:24,274 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:20:43,201 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_ind_district does not exist or is not writable
2024-04-29 09:20:46,984 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 1, modified: 0
2024-04-29 09:23:12,681 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-29 09:23:17,211 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 1, removed: 0, modified: 0
2024-04-29 09:23:20,416 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,420 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,426 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,427 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:20,421 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,429 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:20,429 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:20,430 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:20,442 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,443 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,451 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,461 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:23:20,470 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:23:20,468 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,479 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:20,606 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,670 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:20,862 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:20,962 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:22,446 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:22,786 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:23,783 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:28,561 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:28,998 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:29,386 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:30,530 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[19.437063147162448 : 24.92594170623402, 70.01103160612918 : 78.31647662685312]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=19.437063147162448,70.01103160612918,24.92594170623402,78.31647662685312, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:23:30,741 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.48306909117373 : 33.453008763883346, 59.464234401132586 : 92.67158904760504]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.48306909117373,59.464234401132586,33.453008763883346,92.67158904760504, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:30,753 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.784529675464267 : 27.769499511819074, 66.49302829839311 : 83.10391833984099]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.784529675464267,66.49302829839311,27.769499511819074,83.10391833984099, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:23:33,422 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:23:33,500 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}ind_district
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:23:43,282 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:23:43,409 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:23:43,424 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:23:43,427 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:23:56,200 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:56,662 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.876987671113806 : 28.163371549948838, 64.7362879937789 : 81.80675822313385]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.876987671113806,64.7362879937789,28.163371549948838,81.80675822313385, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:58,618 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,668 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:58,669 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,684 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,696 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:58,696 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:58,719 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,734 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,735 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,745 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:58,747 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,759 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,761 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:23:58,783 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:23:58,784 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:23:58,784 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:23:58,885 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:58,933 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:23:59,796 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:00,676 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:01,028 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:06,025 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:06,176 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.574863284826286 : 25.013339847326286, 70.86579340696335 : 75.30426996946335]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.574863284826286,70.86579340696335,25.013339847326286,75.30426996946335, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:06,697 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:07,476 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 58.8837890625 : 109.46484375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,58.8837890625,39.72119140625001,109.46484375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:08,887 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:09,314 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:09,563 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.691887548267744 : 26.565689718837632, 69.19255742091444 : 84.13300840568608]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.691887548267744,69.19255742091444,26.565689718837632,84.13300840568608, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:24:09,845 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.685681304128334 : 25.25557167302585, 70.24536337233569 : 81.6996718608843]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.685681304128334,70.24536337233569,25.25557167302585,81.6996718608843, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:24:10,299 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:10,321 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.80114522076544 : 21.805821866309003, 72.75810047200036 : 73.76277711754392]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.80114522076544,72.75810047200036,21.805821866309003,73.76277711754392, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:13,022 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:13,074 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.585568719006634 : 21.590245364550196, 73.0865287273216 : 74.09120537286516]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.585568719006634,73.0865287273216,21.590245364550196,74.09120537286516, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:13,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:13,882 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.68568130412833 : 25.255571673025848, 70.49901935710163 : 81.95332784565024]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.68568130412833,70.49901935710163,25.255571673025848,81.95332784565024, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:24:14,575 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:14,617 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[21.672309928957507 : 22.67698657450107, 72.53567549179256 : 73.54035213733611]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=21.672309928957507,72.53567549179256,22.67698657450107,73.54035213733611, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:16,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:17,264 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[21.094748841746647 : 22.09942548729021, 72.72631515353937 : 73.73099179908293]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=21.094748841746647,72.72631515353937,22.09942548729021,73.73099179908293, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:19,912 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:20,173 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.197902433953832 : 22.94315535851779, 72.2291194571977 : 76.38126941274712]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.197902433953832,72.2291194571977,22.94315535851779,76.38126941274712, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:21,494 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:21,769 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.54149599663313 : 23.286748921197088, 71.93764171781922 : 76.08979167336864]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.54149599663313,71.93764171781922,23.286748921197088,76.08979167336864, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:24:29,061 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:24:29,080 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[21.518620702626897 : 21.88297095936929, 72.82384597620867 : 73.18819623295107]
 layers: india:ind_district
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=21.518620702626897,72.82384597620867,21.88297095936929,73.18819623295107, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:24:46,899 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:24:46,901 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}india_state_1
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:24:53,732 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:24:53,736 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:24:53,747 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:24:53,752 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:24:59,794 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:00,315 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.54149599663313 : 23.286748921197088, 71.93764171781922 : 76.08979167336864]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.54149599663313,71.93764171781922,23.286748921197088,76.08979167336864, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:01,920 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:01,926 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:25:01,936 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:01,941 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:25:13,179 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:13,185 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:25:13,196 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:13,200 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:25:15,140 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,141 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,142 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,145 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,148 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,148 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:25:15,150 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:25:15,148 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:25:15,150 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:25:15,173 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:25:15,193 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,195 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,206 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:15,333 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:15,334 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:25:15,615 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:15,622 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:16,224 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:16,825 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:17,432 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:25:28,134 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:25:28,136 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}india_state_1
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:25:41,294 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:41,329 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.122113108634956 : 24.560589671134956, 69.76324188709259 : 74.20171844959259]
 layers: india:india_state_1
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=20.122113108634956,69.76324188709259,24.560589671134956,74.20171844959259, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:25:41,690 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:25:42,089 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 85.734375 : 136.3154296875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,85.734375,39.72119140625001,136.3154296875, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:00,144 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:00,149 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:00,160 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:00,164 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:02,260 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:02,276 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[9.047412537655617 : 42.48979535015562, 106.4504312092937 : 157.0314858967937]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=9.047412537655617,106.4504312092937,42.48979535015562,157.0314858967937, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:03,475 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:03,827 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:04,665 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,674 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:04,681 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,687 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:04,779 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,783 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:04,794 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,797 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:04,892 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,895 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:04,902 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:04,906 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:05,082 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.07188843186043 : 44.51427124436043, 69.50342672879857 : 120.08448141629857]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.07188843186043,69.50342672879857,44.51427124436043,120.08448141629857, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:05,364 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[9.904668852640611 : 43.34705166514061, 57.000558851315205 : 107.5816135388152]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=9.904668852640611,57.000558851315205,43.34705166514061,107.5816135388152, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:05,750 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,781 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:05,778 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,796 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,796 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,796 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:05,797 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:05,797 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:05,804 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,804 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,813 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:05,816 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:05,816 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:26:05,817 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,817 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,826 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,840 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:05,866 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:05,967 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:06,562 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:07,166 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:07,674 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:16,298 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:16,299 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}india_state_1
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:26:28,032 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:28,039 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:28,048 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:28,054 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:26:39,357 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,357 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,359 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,360 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:39,403 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:39,405 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:39,406 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,408 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,416 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:26:39,413 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,418 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:26:39,413 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,409 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:39,434 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,442 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@28c3e078
2024-04-29 09:26:39,447 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,453 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:39,475 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:39,505 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:40,151 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:40,671 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:41,179 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:44,403 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:44,459 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.48940810561181 : 24.92788466811181, 69.2603411078453 : 73.6988176703453]
 layers: india:india_state_1
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=20.48940810561181,69.2603411078453,24.92788466811181,73.6988176703453, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-29 09:26:44,762 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:45,238 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 85.20703125 : 135.7880859375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,85.20703125,39.72119140625001,135.7880859375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:48,672 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:48,974 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.184306263923652 : 40.62668907642365, 92.80839550495148 : 143.38945019245148]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.184306263923652,92.80839550495148,40.62668907642365,143.38945019245148, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:26:56,017 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:26:57,089 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[8.588485598564155 : 42.030868411064155, 78.99426805973053 : 129.57532274723053]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=8.588485598564155,78.99426805973053,42.030868411064155,129.57532274723053, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:27:01,157 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:27:01,179 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.973157346248634 : 41.415540158748634, 96.26150357723236 : 146.84255826473236]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.973157346248634,96.26150357723236,41.415540158748634,146.84255826473236, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:23,655 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:23,668 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:23,663 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:23,663 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:23,662 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:23,819 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.09675495988193 : 31.028101862353996, 64.71813569436046 : 87.30155262569468]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.09675495988193,64.71813569436046,31.028101862353996,87.30155262569468, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:24,167 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.09675495988193 : 31.028101862353996, 64.71813569436046 : 87.30155262569468]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.09675495988193,64.71813569436046,31.028101862353996,87.30155262569468, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:24,545 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.09675495988193 : 31.028101862353996, 64.71813569436046 : 87.30155262569468]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.09675495988193,64.71813569436046,31.028101862353996,87.30155262569468, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:25,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,211 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,215 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,212 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,360 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.158782754039548 : 36.21268511947801, 59.97375211579467 : 94.8424007657548]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.158782754039548,59.97375211579467,36.21268511947801,94.8424007657548, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:25,402 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.158782754039548 : 36.21268511947801, 59.97375211579467 : 94.8424007657548]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.158782754039548,59.97375211579467,36.21268511947801,94.8424007657548, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:25,509 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,646 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.09675495988193 : 31.028101862353996, 64.71813569436046 : 87.30155262569468]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.09675495988193,64.71813569436046,31.028101862353996,87.30155262569468, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:25,804 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:25,978 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:27,351 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.158782754039548 : 36.21268511947801, 59.97375211579467 : 94.8424007657548]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.158782754039548,59.97375211579467,36.21268511947801,94.8424007657548, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:27,506 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:27,620 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[1.161294980699509 : 57.14515561561601, 41.023879963290895 : 125.73533268484984]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=1.161294980699509,41.023879963290895,57.14515561561601,125.73533268484984, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:27,739 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:27,864 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[1.161294980699509 : 57.14515561561601, 41.023879963290895 : 125.73533268484984]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=1.161294980699509,41.023879963290895,57.14515561561601,125.73533268484984, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:27,958 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:28,078 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[16.09675495988193 : 31.028101862353996, 64.71813569436046 : 87.30155262569468]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=16.09675495988193,64.71813569436046,31.028101862353996,87.30155262569468, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:28,196 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:28,617 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[1.161294980699509 : 57.14515561561601, 41.023879963290895 : 125.73533268484984]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=1.161294980699509,41.023879963290895,57.14515561561601,125.73533268484984, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:28,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:29,011 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[1.161294980699509 : 57.14515561561601, 41.023879963290895 : 125.73533268484984]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=1.161294980699509,41.023879963290895,57.14515561561601,125.73533268484984, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:29,050 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.158782754039548 : 36.21268511947801, 59.97375211579467 : 94.8424007657548]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.158782754039548,59.97375211579467,36.21268511947801,94.8424007657548, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:29,161 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:29,216 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:29,324 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.581155080123608 : 52.439488643252105, 46.04642839339796 : 130.7578811149569]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=-3.581155080123608,46.04642839339796,52.439488643252105,130.7578811149569, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:29,351 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.581155080123608 : 52.439488643252105, 46.04642839339796 : 130.7578811149569]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=-3.581155080123608,46.04642839339796,52.439488643252105,130.7578811149569, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:29,456 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:29,493 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:30,258 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.581155080123608 : 52.439488643252105, 46.04642839339796 : 130.7578811149569]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=-3.581155080123608,46.04642839339796,52.439488643252105,130.7578811149569, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:30,267 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.581155080123608 : 52.439488643252105, 46.04642839339796 : 130.7578811149569]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=-3.581155080123608,46.04642839339796,52.439488643252105,130.7578811149569, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:30,394 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:30,412 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:30,514 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[2.452141135231095 : 43.434725914928435, 56.35999666771516 : 118.34548297708656]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=2.452141135231095,56.35999666771516,43.434725914928435,118.34548297708656, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:30,614 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:30,661 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[2.452141135231095 : 43.434725914928435, 56.35999666771516 : 118.34548297708656]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=2.452141135231095,56.35999666771516,43.434725914928435,118.34548297708656, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:30,764 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:31,563 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[2.452141135231095 : 43.434725914928435, 56.35999666771516 : 118.34548297708656]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=2.452141135231095,56.35999666771516,43.434725914928435,118.34548297708656, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:31,679 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[1.161294980699509 : 57.14515561561601, 41.023879963290895 : 125.73533268484984]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=1.161294980699509,41.023879963290895,57.14515561561601,125.73533268484984, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:31,693 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:31,736 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[2.452141135231095 : 43.434725914928435, 56.35999666771516 : 118.34548297708656]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=2.452141135231095,56.35999666771516,43.434725914928435,118.34548297708656, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:31,795 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:31,863 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:31,950 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.088491912679778 : 37.63776282132287, 58.98750411086068 : 108.18541719798898]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.088491912679778,58.98750411086068,37.63776282132287,108.18541719798898, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:32,054 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:32,101 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.158782754039548 : 36.21268511947801, 59.97375211579467 : 94.8424007657548]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.158782754039548,59.97375211579467,36.21268511947801,94.8424007657548, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:32,125 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.088491912679778 : 37.63776282132287, 58.98750411086068 : 108.18541719798898]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.088491912679778,58.98750411086068,37.63776282132287,108.18541719798898, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:32,264 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:32,276 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:33,244 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.088491912679778 : 37.63776282132287, 58.98750411086068 : 108.18541719798898]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.088491912679778,58.98750411086068,37.63776282132287,108.18541719798898, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:33,381 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:33,803 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.581155080123608 : 52.439488643252105, 46.04642839339796 : 130.7578811149569]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=-3.581155080123608,46.04642839339796,52.439488643252105,130.7578811149569, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 09:28:33,910 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:33,975 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.526686515606656 : 40.07595742424975, 59.026326614085285 : 108.22423970121358]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.526686515606656,59.026326614085285,40.07595742424975,108.22423970121358, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:34,059 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:34,107 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.526686515606656 : 40.07595742424975, 59.026326614085285 : 108.22423970121358]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.526686515606656,59.026326614085285,40.07595742424975,108.22423970121358, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:34,291 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:28:34,386 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.088491912679778 : 37.63776282132287, 58.98750411086068 : 108.18541719798898]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.088491912679778,58.98750411086068,37.63776282132287,108.18541719798898, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:34,388 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.526686515606656 : 40.07595742424975, 59.026326614085285 : 108.22423970121358]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.526686515606656,59.026326614085285,40.07595742424975,108.22423970121358, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:34,853 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[2.452141135231095 : 43.434725914928435, 56.35999666771516 : 118.34548297708656]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=2.452141135231095,56.35999666771516,43.434725914928435,118.34548297708656, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:34,983 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.526686515606656 : 40.07595742424975, 59.026326614085285 : 108.22423970121358]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.526686515606656,59.026326614085285,40.07595742424975,108.22423970121358, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:35,849 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.088491912679778 : 37.63776282132287, 58.98750411086068 : 108.18541719798898]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.088491912679778,58.98750411086068,37.63776282132287,108.18541719798898, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:28:36,209 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[7.526686515606656 : 40.07595742424975, 59.026326614085285 : 108.22423970121358]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=7.526686515606656,59.026326614085285,40.07595742424975,108.22423970121358, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:30:11,102 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:30:11,108 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {http://www.census.gov}poly_landmarks
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:30:12,650 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:30:12,659 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:31:11,669 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-29 09:31:11,671 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-29 09:31:11,673 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-29 09:31:11,673 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-29 09:31:11,673 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-29 09:31:11,679 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-29 09:31:11,679 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-29 09:31:11,685 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-29 09:31:11,686 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-29 09:31:11,686 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-29 09:31:11,686 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-29 09:31:11,701 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@2713ca9c[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@387345cb] rejected from java.util.concurrent.ThreadPoolExecutor@35e86dd7[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-29 09:31:11,704 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-29 09:31:33,047 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:31:33,060 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:31:33,956 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-29 09:31:34,370 INFO [org.geoserver] - Loading catalog...
2024-04-29 09:31:34,487 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-29 09:31:34,488 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-29 09:31:34,489 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-29 09:31:34,491 INFO [org.geoserver] - Loaded style 'poi'
2024-04-29 09:31:34,492 INFO [org.geoserver] - Loaded style 'burg'
2024-04-29 09:31:34,492 INFO [org.geoserver] - Loaded style 'population'
2024-04-29 09:31:34,493 INFO [org.geoserver] - Loaded style 'raster'
2024-04-29 09:31:34,494 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-29 09:31:34,495 INFO [org.geoserver] - Loaded style 'point'
2024-04-29 09:31:34,496 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-29 09:31:34,496 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-29 09:31:34,497 INFO [org.geoserver] - Loaded style 'grass'
2024-04-29 09:31:34,497 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-29 09:31:34,498 INFO [org.geoserver] - Loaded style 'green'
2024-04-29 09:31:34,499 INFO [org.geoserver] - Loaded style 'dem'
2024-04-29 09:31:34,501 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-29 09:31:34,502 INFO [org.geoserver] - Loaded style 'generic'
2024-04-29 09:31:34,503 INFO [org.geoserver] - Loaded style 'line'
2024-04-29 09:31:34,504 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-29 09:31:34,504 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-29 09:31:34,505 INFO [org.geoserver] - Loaded style 'rain'
2024-04-29 09:31:34,508 INFO [org.geoserver] - Loaded default workspace cite
2024-04-29 09:31:34,529 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-29 09:31:34,535 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-29 09:31:34,539 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-29 09:31:34,541 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-29 09:31:34,543 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-29 09:31:34,547 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-29 09:31:34,550 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-29 09:31:34,568 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-29 09:31:34,577 INFO [org.geoserver] - Loaded style 'soil'
2024-04-29 09:31:34,902 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-29 09:31:36,544 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-29 09:31:36,580 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-29 09:31:36,583 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-29 09:31:37,226 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-29 09:31:37,227 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-29 09:31:37,228 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-29 09:31:37,235 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-29 09:31:37,237 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-29 09:31:37,241 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-29 09:31:37,250 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-29 09:31:37,253 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-29 09:31:37,514 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-29 09:31:37,541 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-29 09:31:37,545 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-29 09:31:37,551 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-29 09:31:37,556 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-29 09:31:37,560 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-29 09:31:37,562 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-29 09:31:37,566 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-29 09:31:37,569 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-29 09:31:37,584 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-29 09:31:37,683 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-29 09:31:37,685 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-29 09:31:37,705 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-29 09:31:37,719 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-29 09:31:37,729 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-29 09:31:37,731 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-29 09:31:37,739 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-29 09:31:37,741 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-29 09:31:37,748 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-29 09:31:37,750 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-29 09:31:37,752 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-29 09:31:37,764 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-29 09:31:37,765 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-29 09:31:37,776 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-29 09:31:37,784 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-29 09:31:37,788 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-29 09:31:37,797 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-29 09:31:37,804 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-29 09:31:37,807 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-29 09:31:37,809 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-29 09:31:37,813 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-29 09:31:37,815 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-29 09:31:37,822 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-29 09:31:37,830 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-29 09:31:37,832 INFO [org.geoserver] - Loaded layer 'states'
2024-04-29 09:31:38,540 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-29 09:31:38,557 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-29 09:31:38,560 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-29 09:31:38,569 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-29 09:31:38,573 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-29 09:31:38,577 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-29 09:31:38,578 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-29 09:31:38,581 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-29 09:31:38,584 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-29 09:31:38,588 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-29 09:31:38,589 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-29 09:31:38,592 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-29 09:31:38,594 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-29 09:31:38,614 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-29 09:31:38,618 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-29 09:31:38,621 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-29 09:31:38,626 INFO [org.geoserver] - Read catalog in 4.254 s
2024-04-29 09:31:38,847 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--3f596400:18f2803f41e:-8000', enabled
2024-04-29 09:31:38,870 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-29 09:31:38,882 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-29 09:31:38,909 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-29 09:31:38,952 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:31:39,069 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:31:39,070 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:31:39,070 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:31:39,139 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 09:31:39,140 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-29 09:31:39,140 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-29 09:31:39,140 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 09:31:39,205 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-29 09:31:39,207 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-29 09:31:39,269 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-29 09:31:39,269 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-29 09:31:39,269 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-29 09:31:39,329 INFO [gwc.layer] - Loaded 28 tile layers in 59.54 ms
2024-04-29 09:31:39,341 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-29 09:31:39,353 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 09:31:39,353 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-29 09:31:39,353 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 09:31:39,464 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-29 09:31:40,031 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:31:40,043 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:31:40,048 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 09:31:40,058 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 09:31:40,060 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-29 09:31:40,060 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-29 09:31:40,062 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-29 09:31:40,108 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-29 09:31:40,369 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-29 09:31:40,392 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-29 09:31:40,393 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-29 09:31:40,521 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-29 09:31:40,521 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-29 09:31:44,726 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:31:44,773 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-29 09:31:46,572 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-29 09:31:46,578 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-29 09:31:46,769 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-29 09:31:46,770 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-29 09:31:48,134 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:48,134 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:48,134 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:48,134 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:31:48,134 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:48,134 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:48,812 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 09:31:50,340 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@17c51bf7
2024-04-29 09:31:50,340 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=polygon, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@17c51bf7
2024-04-29 09:31:50,352 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@17c51bf7
2024-04-29 09:31:50,425 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:50,425 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:50,853 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@17c51bf7
2024-04-29 09:31:50,876 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:50,876 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:50,876 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:31:52,039 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:31:52,206 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:31:52,230 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@17c51bf7
2024-04-29 09:31:53,857 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:31:54,300 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:31:55,106 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 09:32:04,136 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:04,230 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}india_state_1
    outputFormat = text/xml; subtype=gml/3.1.1
2024-04-29 09:32:24,430 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:24,516 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:32:24,529 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:24,532 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:32:38,703 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:38,711 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:32:38,735 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:38,744 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:32:41,929 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:41,940 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:32:41,954 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 09:32:41,960 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy65.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-29 09:52:57,510 INFO [geoserver.security] - Strong cryptography is available
2024-04-29 09:55:17,542 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-29 09:55:17,543 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-29 09:55:17,545 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-29 09:55:17,545 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-29 09:55:17,545 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-29 09:55:17,549 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-29 09:55:17,549 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-29 09:55:17,561 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-29 09:55:17,562 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-29 09:55:17,562 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-29 09:55:17,563 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-29 09:55:17,574 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@2b77bc3[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@5fc6442e] rejected from java.util.concurrent.ThreadPoolExecutor@7bc7f594[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-29 09:55:17,576 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-29 09:55:37,507 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:55:37,518 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:55:38,297 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-29 09:55:38,669 INFO [org.geoserver] - Loading catalog...
2024-04-29 09:55:38,776 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-29 09:55:38,777 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-29 09:55:38,778 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-29 09:55:38,779 INFO [org.geoserver] - Loaded style 'burg'
2024-04-29 09:55:38,779 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-29 09:55:38,780 INFO [org.geoserver] - Loaded style 'poi'
2024-04-29 09:55:38,780 INFO [org.geoserver] - Loaded style 'population'
2024-04-29 09:55:38,781 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-29 09:55:38,781 INFO [org.geoserver] - Loaded style 'point'
2024-04-29 09:55:38,782 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-29 09:55:38,782 INFO [org.geoserver] - Loaded style 'raster'
2024-04-29 09:55:38,782 INFO [org.geoserver] - Loaded style 'dem'
2024-04-29 09:55:38,783 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-29 09:55:38,784 INFO [org.geoserver] - Loaded style 'grass'
2024-04-29 09:55:38,784 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-29 09:55:38,786 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-29 09:55:38,787 INFO [org.geoserver] - Loaded style 'green'
2024-04-29 09:55:38,789 INFO [org.geoserver] - Loaded style 'generic'
2024-04-29 09:55:38,790 INFO [org.geoserver] - Loaded style 'line'
2024-04-29 09:55:38,791 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-29 09:55:38,791 INFO [org.geoserver] - Loaded style 'rain'
2024-04-29 09:55:38,794 INFO [org.geoserver] - Loaded default workspace cite
2024-04-29 09:55:38,815 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-29 09:55:38,820 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-29 09:55:38,824 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-29 09:55:38,826 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-29 09:55:38,827 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-29 09:55:38,828 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-29 09:55:38,829 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-29 09:55:38,844 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-29 09:55:38,852 INFO [org.geoserver] - Loaded style 'soil'
2024-04-29 09:55:39,124 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-29 09:55:40,406 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-29 09:55:40,424 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-29 09:55:40,426 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-29 09:55:40,435 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-29 09:55:40,437 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-29 09:55:40,439 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-29 09:55:40,804 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-29 09:55:40,805 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-29 09:55:40,807 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-29 09:55:40,814 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-29 09:55:40,815 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-29 09:55:40,961 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-29 09:55:40,976 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-29 09:55:40,978 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-29 09:55:40,982 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-29 09:55:40,985 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-29 09:55:40,989 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-29 09:55:40,990 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-29 09:55:40,993 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-29 09:55:40,996 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-29 09:55:41,004 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-29 09:55:41,049 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-29 09:55:41,051 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-29 09:55:41,056 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-29 09:55:41,058 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-29 09:55:41,064 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-29 09:55:41,065 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-29 09:55:41,071 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-29 09:55:41,072 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-29 09:55:41,077 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-29 09:55:41,079 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-29 09:55:41,080 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-29 09:55:41,088 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-29 09:55:41,089 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-29 09:55:41,096 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-29 09:55:41,102 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-29 09:55:41,104 INFO [org.geoserver] - Loaded layer 'states'
2024-04-29 09:55:41,109 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-29 09:55:41,118 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-29 09:55:41,122 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-29 09:55:41,124 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-29 09:55:41,126 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-29 09:55:41,129 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-29 09:55:41,131 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-29 09:55:41,133 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-29 09:55:41,134 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-29 09:55:41,395 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-29 09:55:41,403 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-29 09:55:41,405 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-29 09:55:41,408 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-29 09:55:41,410 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-29 09:55:41,414 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-29 09:55:41,416 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-29 09:55:41,418 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-29 09:55:41,419 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-29 09:55:41,422 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-29 09:55:41,423 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-29 09:55:41,426 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-29 09:55:41,428 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-29 09:55:41,446 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-29 09:55:41,449 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-29 09:55:41,450 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-29 09:55:41,455 INFO [org.geoserver] - Read catalog in 2.783 s
2024-04-29 09:55:41,598 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--1a094a54:18f2819f7dd:-8000', enabled
2024-04-29 09:55:41,615 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-29 09:55:41,622 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-29 09:55:41,646 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-29 09:55:41,705 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:55:41,802 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:55:41,802 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:55:41,802 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 09:55:41,869 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 09:55:41,869 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-29 09:55:41,869 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-29 09:55:41,869 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 09:55:41,971 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-29 09:55:41,973 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-29 09:55:42,045 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-29 09:55:42,047 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-29 09:55:42,047 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-29 09:55:42,109 INFO [gwc.layer] - Loaded 28 tile layers in 60.98 ms
2024-04-29 09:55:42,123 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-29 09:55:42,135 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 09:55:42,136 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-29 09:55:42,136 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 09:55:42,254 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-29 09:55:42,907 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:55:42,921 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 09:55:42,925 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 09:55:42,939 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 09:55:42,942 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-29 09:55:42,942 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-29 09:55:42,944 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-29 09:55:43,007 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-29 09:55:43,271 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-29 09:55:43,290 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-29 09:55:43,292 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-29 09:55:43,407 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-29 09:55:43,408 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-29 09:55:46,587 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 09:55:46,622 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-29 09:55:48,084 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-29 09:55:48,089 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-29 09:55:48,249 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-29 09:55:48,250 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-29 09:55:59,520 INFO [geoserver.security] - Strong cryptography is available
2024-04-29 09:59:42,563 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 09:59:43,273 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:00:13,093 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:00:13,104 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=line, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=line, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:00:20,922 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:00:20,944 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:24,584 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:24,596 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:28,581 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:28,588 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:state_bound, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=state_bound, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:state_bound, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:31,705 INFO [gwc.layer] - Truncating default style for layer india:india_state_1, as it changed from polygon to india:state_bound
2024-04-29 10:09:31,851 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.002 seconds
2024-04-29 10:09:31,851 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:09:31,852 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:09:31,852 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:09:31,855 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:india_state_1
2024-04-29 10:09:32,183 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:india_state_1
2024-04-29 10:09:32,983 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-29 10:09:36,056 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,075 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,146 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,147 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:36,151 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,152 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,159 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:36,164 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,170 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 10:09:36,187 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,337 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:36,344 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:36,351 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,361 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:09:36,362 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:36,378 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:09:37,189 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:09:37,255 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:09:37,649 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 10:09:38,796 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:09:39,672 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:09:39,961 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:10:07,340 INFO [gwc.layer] - Truncating layer 'india:india_state_1' due to a change in style 'india:state_bound'
2024-04-29 10:10:07,345 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.001 seconds
2024-04-29 10:10:07,345 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:10:07,346 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:10:07,346 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:10:08,058 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/workspaces/india/styles/state_bound.sld. Created: 0, removed: 0, modified: 0
2024-04-29 10:10:09,954 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:09,963 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:09,969 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:09,991 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:10:09,992 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=polygon, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:10:09,999 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,009 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 10:10:10,009 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,009 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 10:10:10,021 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:10:10,035 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:10:10,073 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,076 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,123 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:10:10,172 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,172 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,172 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:10:10,417 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:10:10,430 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:10:11,368 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:10:11,840 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:10:12,566 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:11:01,419 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:01,431 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:04,671 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:04,679 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:district_bound, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=district_bound, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:district_bound, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:06,776 INFO [gwc.layer] - Truncating default style for layer india:ind_district, as it changed from polygon to india:district_bound
2024-04-29 10:11:06,780 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:11:06,781 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:11:06,782 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:11:06,782 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-29 10:11:06,788 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.006 seconds
2024-04-29 10:11:06,877 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:ind_district
2024-04-29 10:11:08,113 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-29 10:11:09,129 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,140 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,145 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:09,147 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,153 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:09,154 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,154 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,178 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:09,182 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:09,202 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,204 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,209 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,211 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:11:09,446 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:11:09,468 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 10:11:09,469 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 10:11:09,611 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:11:09,617 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:11:10,450 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:11:10,962 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:11:11,461 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:12:46,217 INFO [gwc.layer] - Truncating layer 'tiger:poi' due to a change in style 'point'
2024-04-29 10:12:46,222 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,223 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,224 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.001 seconds
2024-04-29 10:12:46,224 INFO [gwc.layer] - Truncating layer 'sf:archsites' due to a change in style 'point'
2024-04-29 10:12:46,224 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,530 INFO [gwc.layer] - Truncating layer 'sf:bugsites' due to a change in style 'point'
2024-04-29 10:12:46,538 INFO [gwc.layer] - Truncating layer 'india:apmc' due to a change in style 'point'
2024-04-29 10:12:46,540 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,541 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,541 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,541 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,541 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,541 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,542 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,542 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,544 INFO [gwc.layer] - Truncating layer 'india:cold_st' due to a change in style 'point'
2024-04-29 10:12:46,544 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,545 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,545 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,545 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,551 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,551 INFO [gwc.layer] - Truncating layer group 'spearfish' due to a change in style 'point'
2024-04-29 10:12:46,551 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,552 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,552 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:46,552 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-29 10:12:46,552 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-29 10:12:48,244 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/styles/default_point.sld. Created: 0, removed: 0, modified: 0
2024-04-29 10:12:52,756 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:12:52,761 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=point, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=point, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=point, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:12:56,614 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:12:56,618 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:blue_point, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=blue_point, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=india:blue_point, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:12:58,879 INFO [gwc.layer] - Truncating default style for layer india:apmc, as it changed from point to india:blue_point
2024-04-29 10:12:58,879 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,880 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.001 seconds
2024-04-29 10:12:58,880 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,880 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,884 INFO [gwc.layer] - Truncating cached style point of layer india:apmc as it's no longer one of the layer's styles
2024-04-29 10:12:58,885 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,885 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,886 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:apmc
2024-04-29 10:12:58,886 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.0 seconds
2024-04-29 10:12:58,896 INFO [seed.GWCTask] - Thread group finished TRUNCATE task after 0.009 seconds
2024-04-29 10:12:58,967 INFO [geoserver.gwc] - Saving GeoSeverTileLayer india:apmc
2024-04-29 10:13:01,244 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,244 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,252 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,252 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:13:01,261 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:13:01,270 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:13:01,282 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,289 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,286 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,301 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:13:01,284 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,354 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@2fc03863
2024-04-29 10:13:01,391 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,403 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,403 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:01,437 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 10:13:01,438 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 10:13:01,520 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:13:01,547 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:13:02,433 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:13:02,850 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:13:03,262 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 0, modified: 1
2024-04-29 10:13:03,512 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 10:13:09,984 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:10,070 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.24709869400322 : 28.62282422143592, 65.28015834000472 : 82.48192845798074]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.24709869400322,65.28015834000472,28.62282422143592,82.48192845798074, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 10:13:11,915 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:11,958 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.24709869400322 : 28.62282422143592, 65.28015834000472 : 82.48192845798074]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.24709869400322,65.28015834000472,28.62282422143592,82.48192845798074, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 10:13:16,673 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:17,594 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.24709869400322 : 28.62282422143592, 65.28015834000472 : 82.48192845798074]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.24709869400322,65.28015834000472,28.62282422143592,82.48192845798074, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 10:13:18,738 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:19,336 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.24709869400322 : 28.62282422143592, 65.28015834000472 : 82.48192845798074]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.24709869400322,65.28015834000472,28.62282422143592,82.48192845798074, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 10:13:21,835 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 10:13:22,127 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.24709869400322 : 28.62282422143592, 65.28015834000472 : 82.48192845798074]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=17.24709869400322,65.28015834000472,28.62282422143592,82.48192845798074, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 10:22:54,768 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-29 10:22:54,770 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-29 10:22:54,771 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-29 10:22:54,771 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-29 10:22:54,772 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-29 10:22:54,775 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-29 10:22:54,775 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-29 10:22:54,780 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-29 10:22:54,780 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-29 10:22:55,287 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-29 10:22:55,289 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-29 10:22:55,309 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@363c35c3[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@153788e5] rejected from java.util.concurrent.ThreadPoolExecutor@6e29f067[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-29 10:22:55,314 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-29 17:00:58,694 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 17:00:58,708 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 17:00:59,657 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-29 17:01:00,106 INFO [org.geoserver] - Loading catalog...
2024-04-29 17:01:00,212 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-29 17:01:00,213 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-29 17:01:00,214 INFO [org.geoserver] - Loaded style 'burg'
2024-04-29 17:01:00,215 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-29 17:01:00,217 INFO [org.geoserver] - Loaded style 'poi'
2024-04-29 17:01:00,218 INFO [org.geoserver] - Loaded style 'raster'
2024-04-29 17:01:00,218 INFO [org.geoserver] - Loaded style 'population'
2024-04-29 17:01:00,219 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-29 17:01:00,220 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-29 17:01:00,221 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-29 17:01:00,221 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-29 17:01:00,222 INFO [org.geoserver] - Loaded style 'dem'
2024-04-29 17:01:00,223 INFO [org.geoserver] - Loaded style 'grass'
2024-04-29 17:01:00,225 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-29 17:01:00,226 INFO [org.geoserver] - Loaded style 'green'
2024-04-29 17:01:00,228 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-29 17:01:00,242 INFO [org.geoserver] - Loaded style 'point'
2024-04-29 17:01:00,242 INFO [org.geoserver] - Loaded style 'line'
2024-04-29 17:01:00,243 INFO [org.geoserver] - Loaded style 'generic'
2024-04-29 17:01:00,243 INFO [org.geoserver] - Loaded style 'rain'
2024-04-29 17:01:00,244 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-29 17:01:00,247 INFO [org.geoserver] - Loaded default workspace cite
2024-04-29 17:01:00,272 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-29 17:01:00,278 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-29 17:01:00,282 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-29 17:01:00,284 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-29 17:01:00,286 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-29 17:01:00,287 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-29 17:01:00,289 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-29 17:01:00,292 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-29 17:01:00,302 INFO [org.geoserver] - Loaded style 'blue_point'
2024-04-29 17:01:00,303 INFO [org.geoserver] - Loaded style 'soil'
2024-04-29 17:01:00,305 INFO [org.geoserver] - Loaded style 'state_bound'
2024-04-29 17:01:00,306 INFO [org.geoserver] - Loaded style 'district_bound'
2024-04-29 17:01:00,655 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-29 17:01:02,039 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-29 17:01:02,059 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-29 17:01:02,061 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-29 17:01:02,071 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-29 17:01:02,073 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-29 17:01:02,075 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-29 17:01:02,081 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-29 17:01:02,083 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-29 17:01:02,087 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-29 17:01:02,486 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-29 17:01:02,488 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-29 17:01:02,708 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-29 17:01:02,756 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-29 17:01:02,758 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-29 17:01:02,761 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-29 17:01:02,762 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-29 17:01:02,766 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-29 17:01:02,768 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-29 17:01:02,772 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-29 17:01:02,774 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-29 17:01:02,785 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-29 17:01:02,823 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-29 17:01:02,825 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-29 17:01:02,831 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-29 17:01:02,833 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-29 17:01:02,838 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-29 17:01:02,839 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-29 17:01:02,844 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-29 17:01:02,844 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-29 17:01:02,849 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-29 17:01:02,851 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-29 17:01:02,852 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-29 17:01:02,859 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-29 17:01:02,861 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-29 17:01:02,875 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-29 17:01:02,883 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-29 17:01:02,884 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-29 17:01:02,890 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-29 17:01:02,894 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-29 17:01:02,897 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-29 17:01:02,898 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-29 17:01:02,901 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-29 17:01:02,902 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-29 17:01:02,907 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-29 17:01:02,913 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-29 17:01:02,916 INFO [org.geoserver] - Loaded layer 'states'
2024-04-29 17:01:03,387 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-29 17:01:03,394 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-29 17:01:03,395 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-29 17:01:03,401 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-29 17:01:03,402 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-29 17:01:03,405 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-29 17:01:03,407 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-29 17:01:03,409 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-29 17:01:03,410 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-29 17:01:03,412 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-29 17:01:03,414 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-29 17:01:03,418 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-29 17:01:03,420 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-29 17:01:03,439 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-29 17:01:03,442 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-29 17:01:03,443 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-29 17:01:03,449 INFO [org.geoserver] - Read catalog in 3.340 s
2024-04-29 17:01:03,590 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--28e5cef6:18f299f6726:-8000', enabled
2024-04-29 17:01:03,608 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-29 17:01:03,617 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-29 17:01:03,646 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-29 17:01:03,679 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 17:01:03,766 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 17:01:03,767 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 17:01:03,767 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 17:01:03,831 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 17:01:03,832 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-29 17:01:03,832 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-29 17:01:03,832 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 17:01:03,895 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-29 17:01:03,896 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-29 17:01:03,975 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-29 17:01:03,975 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-29 17:01:03,975 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-29 17:01:04,035 INFO [gwc.layer] - Loaded 28 tile layers in 59.19 ms
2024-04-29 17:01:04,048 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-29 17:01:04,057 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 17:01:04,057 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-29 17:01:04,057 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 17:01:04,175 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-29 17:01:04,790 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 17:01:04,801 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 17:01:04,805 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 17:01:04,816 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 17:01:04,818 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-29 17:01:04,818 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-29 17:01:04,820 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-29 17:01:04,866 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-29 17:01:05,120 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-29 17:01:05,148 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-29 17:01:05,149 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-29 17:01:05,262 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-29 17:01:05,262 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-29 17:01:09,971 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 17:01:10,010 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-29 17:01:11,680 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-29 17:01:11,686 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-29 17:01:11,866 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-29 17:01:11,866 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-29 17:01:13,310 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:13,313 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:13,315 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:13,316 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:13,316 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:13,316 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:16,399 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@22a8209a
2024-04-29 17:01:16,399 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@22a8209a
2024-04-29 17:01:16,403 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@22a8209a
2024-04-29 17:01:16,404 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@22a8209a
2024-04-29 17:01:16,526 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 17:01:16,526 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:16,533 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:16,583 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:17,800 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 17:01:18,015 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 17:01:18,990 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 17:01:19,192 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 17:01:20,266 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 17:01:20,466 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 17:01:20,627 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 17:01:22,255 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@22a8209a
2024-04-29 17:05:40,193 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-29 17:05:40,195 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-29 17:05:40,196 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-29 17:05:40,196 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-29 17:05:40,197 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-29 17:05:40,198 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-29 17:05:40,198 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-29 17:05:40,199 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-29 17:05:40,200 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-29 17:05:40,200 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-29 17:05:40,201 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-29 17:05:40,213 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@36d786b8[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@6577e878] rejected from java.util.concurrent.ThreadPoolExecutor@6962581b[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-29 17:05:40,214 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-29 21:20:20,280 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 21:20:20,290 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 21:20:21,063 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-29 21:20:21,416 INFO [org.geoserver] - Loading catalog...
2024-04-29 21:20:21,523 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-29 21:20:21,524 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-29 21:20:21,525 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-29 21:20:21,526 INFO [org.geoserver] - Loaded style 'burg'
2024-04-29 21:20:21,526 INFO [org.geoserver] - Loaded style 'population'
2024-04-29 21:20:21,527 INFO [org.geoserver] - Loaded style 'poi'
2024-04-29 21:20:21,528 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-29 21:20:21,529 INFO [org.geoserver] - Loaded style 'raster'
2024-04-29 21:20:21,529 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-29 21:20:21,530 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-29 21:20:21,531 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-29 21:20:21,531 INFO [org.geoserver] - Loaded style 'dem'
2024-04-29 21:20:21,532 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-29 21:20:21,533 INFO [org.geoserver] - Loaded style 'grass'
2024-04-29 21:20:21,534 INFO [org.geoserver] - Loaded style 'green'
2024-04-29 21:20:21,549 INFO [org.geoserver] - Loaded style 'point'
2024-04-29 21:20:21,550 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-29 21:20:21,551 INFO [org.geoserver] - Loaded style 'generic'
2024-04-29 21:20:21,552 INFO [org.geoserver] - Loaded style 'rain'
2024-04-29 21:20:21,553 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-29 21:20:21,554 INFO [org.geoserver] - Loaded style 'line'
2024-04-29 21:20:21,557 INFO [org.geoserver] - Loaded default workspace cite
2024-04-29 21:20:21,578 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-29 21:20:21,585 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-29 21:20:21,587 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-29 21:20:21,589 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-29 21:20:21,591 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-29 21:20:21,593 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-29 21:20:21,595 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-29 21:20:21,598 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-29 21:20:21,610 INFO [org.geoserver] - Loaded style 'state_bound'
2024-04-29 21:20:21,612 INFO [org.geoserver] - Loaded style 'blue_point'
2024-04-29 21:20:21,614 INFO [org.geoserver] - Loaded style 'soil'
2024-04-29 21:20:21,616 INFO [org.geoserver] - Loaded style 'district_bound'
2024-04-29 21:20:21,900 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-29 21:20:23,132 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-29 21:20:23,150 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-29 21:20:23,152 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-29 21:20:23,158 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-29 21:20:23,160 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-29 21:20:23,162 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-29 21:20:23,169 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-29 21:20:23,170 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-29 21:20:23,172 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-29 21:20:23,536 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-29 21:20:23,538 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-29 21:20:23,677 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-29 21:20:23,700 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-29 21:20:23,705 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-29 21:20:23,709 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-29 21:20:23,710 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-29 21:20:23,713 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-29 21:20:23,715 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-29 21:20:23,718 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-29 21:20:23,721 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-29 21:20:23,730 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-29 21:20:23,776 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-29 21:20:23,777 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-29 21:20:23,781 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-29 21:20:23,782 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-29 21:20:23,788 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-29 21:20:23,789 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-29 21:20:23,794 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-29 21:20:23,796 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-29 21:20:23,801 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-29 21:20:23,802 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-29 21:20:23,803 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-29 21:20:23,812 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-29 21:20:23,814 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-29 21:20:23,824 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-29 21:20:23,829 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-29 21:20:23,831 INFO [org.geoserver] - Loaded layer 'states'
2024-04-29 21:20:23,834 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-29 21:20:23,845 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-29 21:20:23,848 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-29 21:20:23,851 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-29 21:20:23,853 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-29 21:20:23,855 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-29 21:20:23,856 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-29 21:20:23,858 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-29 21:20:23,859 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-29 21:20:24,164 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-29 21:20:24,172 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-29 21:20:24,175 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-29 21:20:24,179 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-29 21:20:24,182 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-29 21:20:24,186 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-29 21:20:24,188 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-29 21:20:24,191 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-29 21:20:24,193 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-29 21:20:24,197 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-29 21:20:24,199 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-29 21:20:24,203 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-29 21:20:24,205 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-29 21:20:24,229 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-29 21:20:24,231 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-29 21:20:24,239 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-29 21:20:24,264 INFO [org.geoserver] - Read catalog in 2.845 s
2024-04-29 21:20:24,517 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5687a5fb:18f2a8cd804:-8000', enabled
2024-04-29 21:20:24,540 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-29 21:20:24,550 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-29 21:20:24,579 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-29 21:20:24,623 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 21:20:24,724 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 21:20:24,725 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 21:20:24,726 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-29 21:20:24,798 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 21:20:24,799 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-29 21:20:24,799 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-29 21:20:24,799 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-29 21:20:24,881 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-29 21:20:24,887 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-29 21:20:24,961 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-29 21:20:24,962 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-29 21:20:24,967 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-29 21:20:25,047 INFO [gwc.layer] - Loaded 28 tile layers in 79.92 ms
2024-04-29 21:20:25,063 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-29 21:20:25,075 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 21:20:25,076 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-29 21:20:25,076 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-29 21:20:25,210 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-29 21:20:26,098 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 21:20:26,108 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-29 21:20:26,111 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 21:20:26,122 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-29 21:20:26,124 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-29 21:20:26,124 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-29 21:20:26,126 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-29 21:20:26,164 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-29 21:20:26,397 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-29 21:20:26,416 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-29 21:20:26,417 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-29 21:20:26,517 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-29 21:20:26,518 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-29 21:20:30,490 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-29 21:20:30,524 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-29 21:20:32,042 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-29 21:20:32,047 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-29 21:20:32,220 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-29 21:20:32,221 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-29 21:20:33,806 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:33,806 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:33,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:33,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:33,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:33,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:35,763 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@6be0bdf
2024-04-29 21:20:35,768 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@6be0bdf
2024-04-29 21:20:35,857 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-29 21:20:35,857 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:36,041 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@6be0bdf
2024-04-29 21:20:36,057 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:36,735 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@6be0bdf
2024-04-29 21:20:36,746 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:36,954 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 21:20:36,968 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 21:20:37,629 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-29 21:20:37,801 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 21:20:37,857 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:20:38,275 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 21:20:39,273 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-29 21:20:40,053 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@6be0bdf
2024-04-29 21:21:29,768 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:29,781 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:29,782 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:29,769 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:29,951 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[14.530026000009356 : 31.05915814209183, 62.38304477705331 : 87.39394577785222]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=14.530026000009356,62.38304477705331,31.05915814209183,87.39394577785222, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:29,983 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[14.530026000009356 : 31.05915814209183, 62.38304477705331 : 87.39394577785222]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=14.530026000009356,62.38304477705331,31.05915814209183,87.39394577785222, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:30,475 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:30,477 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:30,478 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:30,525 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:31,166 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[19.944260339996205 : 25.37526834412546, 68.73989296989583 : 76.9523758546691]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=19.944260339996205,68.73989296989583,25.37526834412546,76.9523758546691, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:31,257 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[19.944260339996205 : 25.37526834412546, 68.73989296989583 : 76.9523758546691]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=19.944260339996205,68.73989296989583,25.37526834412546,76.9523758546691, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:31,407 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:31,464 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:31,735 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[19.944260339996205 : 25.37526834412546, 68.73989296989583 : 76.9523758546691]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=19.944260339996205,68.73989296989583,25.37526834412546,76.9523758546691, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:31,970 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[19.944260339996205 : 25.37526834412546, 68.73989296989583 : 76.9523758546691]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=19.944260339996205,68.73989296989583,25.37526834412546,76.9523758546691, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,194 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:32,239 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.01213244994558 : 25.303372020320605, 68.8178827377912 : 76.82427217969243]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.01213244994558,68.8178827377912,25.303372020320605,76.82427217969243, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,322 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.01213244994558 : 25.303372020320605, 68.8178827377912 : 76.82427217969243]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.01213244994558,68.8178827377912,25.303372020320605,76.82427217969243, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,412 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:32,576 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.01213244994558 : 25.303372020320605, 68.8178827377912 : 76.82427217969243]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.01213244994558,68.8178827377912,25.303372020320605,76.82427217969243, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,605 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.01213244994558 : 25.303372020320605, 68.8178827377912 : 76.82427217969243]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.01213244994558,68.8178827377912,25.303372020320605,76.82427217969243, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,820 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:32,831 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[14.530026000009356 : 31.05915814209183, 62.38304477705331 : 87.39394577785222]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=14.530026000009356,62.38304477705331,31.05915814209183,87.39394577785222, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:32,896 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:33,039 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:33,147 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-29 21:21:33,180 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.010227417245538 : 25.301466987620564, 68.59461791300664 : 76.60100735490788]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.010227417245538,68.59461791300664,25.301466987620564,76.60100735490788, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:33,302 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.010227417245538 : 25.301466987620564, 68.59461791300664 : 76.60100735490788]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.010227417245538,68.59461791300664,25.301466987620564,76.60100735490788, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:33,476 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.010227417245538 : 25.301466987620564, 68.59461791300664 : 76.60100735490788]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.010227417245538,68.59461791300664,25.301466987620564,76.60100735490788, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:33,662 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[20.010227417245538 : 25.301466987620564, 68.59461791300664 : 76.60100735490788]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=20.010227417245538,68.59461791300664,25.301466987620564,76.60100735490788, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-29 21:21:33,720 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[14.530026000009356 : 31.05915814209183, 62.38304477705331 : 87.39394577785222]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=14.530026000009356,62.38304477705331,31.05915814209183,87.39394577785222, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-30 08:59:00,273 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-30 08:59:00,279 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-30 08:59:00,281 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-30 08:59:00,281 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-30 08:59:00,281 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-30 08:59:00,296 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-30 08:59:00,296 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-30 08:59:00,315 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-30 08:59:00,317 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-30 08:59:00,317 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-30 08:59:00,317 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-30 08:59:00,334 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4aebb4a2[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@43d387b5] rejected from java.util.concurrent.ThreadPoolExecutor@418a6789[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-30 08:59:00,339 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-04-30 10:10:48,485 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-30 10:10:48,500 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-30 10:10:49,717 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-04-30 10:10:50,253 INFO [org.geoserver] - Loading catalog...
2024-04-30 10:10:50,401 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-04-30 10:10:50,402 INFO [org.geoserver] - Loaded style 'burg'
2024-04-30 10:10:50,402 INFO [org.geoserver] - Loaded style 'pophatch'
2024-04-30 10:10:50,403 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-04-30 10:10:50,404 INFO [org.geoserver] - Loaded style 'poi'
2024-04-30 10:10:50,404 INFO [org.geoserver] - Loaded style 'polygon'
2024-04-30 10:10:50,405 INFO [org.geoserver] - Loaded style 'raster'
2024-04-30 10:10:50,406 INFO [org.geoserver] - Loaded style 'population'
2024-04-30 10:10:50,407 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-04-30 10:10:50,407 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-04-30 10:10:50,408 INFO [org.geoserver] - Loaded style 'dem'
2024-04-30 10:10:50,413 INFO [org.geoserver] - Loaded style 'grass'
2024-04-30 10:10:50,433 INFO [org.geoserver] - Loaded style 'point'
2024-04-30 10:10:50,434 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-04-30 10:10:50,434 INFO [org.geoserver] - Loaded style 'restricted'
2024-04-30 10:10:50,437 INFO [org.geoserver] - Loaded style 'green'
2024-04-30 10:10:50,438 INFO [org.geoserver] - Loaded style 'generic'
2024-04-30 10:10:50,438 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-04-30 10:10:50,439 INFO [org.geoserver] - Loaded style 'capitals'
2024-04-30 10:10:50,440 INFO [org.geoserver] - Loaded style 'rain'
2024-04-30 10:10:50,440 INFO [org.geoserver] - Loaded style 'line'
2024-04-30 10:10:50,449 INFO [org.geoserver] - Loaded default workspace cite
2024-04-30 10:10:50,478 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-04-30 10:10:50,484 INFO [org.geoserver] - Loaded workspace 'cite'
2024-04-30 10:10:50,489 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-04-30 10:10:50,490 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-04-30 10:10:50,497 INFO [org.geoserver] - Loaded workspace 'india'
2024-04-30 10:10:50,506 INFO [org.geoserver] - Loaded style 'blue_point'
2024-04-30 10:10:50,515 INFO [org.geoserver] - Loaded style 'soil'
2024-04-30 10:10:50,516 INFO [org.geoserver] - Loaded style 'district_bound'
2024-04-30 10:10:50,519 INFO [org.geoserver] - Loaded style 'state_bound'
2024-04-30 10:10:50,520 INFO [org.geoserver] - Loaded workspace 'sde'
2024-04-30 10:10:50,522 INFO [org.geoserver] - Loaded workspace 'sf'
2024-04-30 10:10:50,524 INFO [org.geoserver] - Loaded workspace 'topp'
2024-04-30 10:10:50,971 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-04-30 10:10:52,754 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2024-04-30 10:10:52,777 INFO [org.geoserver] - Loaded layer 'mosaic'
2024-04-30 10:10:52,779 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-04-30 10:10:53,262 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2024-04-30 10:10:53,264 INFO [org.geoserver] - Loaded layer 'Pk50095'
2024-04-30 10:10:53,268 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-04-30 10:10:53,282 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2024-04-30 10:10:53,283 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2024-04-30 10:10:53,285 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-04-30 10:10:53,294 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2024-04-30 10:10:53,299 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2024-04-30 10:10:53,551 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-04-30 10:10:53,570 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2024-04-30 10:10:53,571 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2024-04-30 10:10:53,580 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2024-04-30 10:10:53,582 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2024-04-30 10:10:53,584 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2024-04-30 10:10:53,586 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2024-04-30 10:10:53,589 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2024-04-30 10:10:53,595 INFO [org.geoserver] - Loaded layer 'poi'
2024-04-30 10:10:53,603 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-04-30 10:10:53,694 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2024-04-30 10:10:53,696 INFO [org.geoserver] - Loaded layer 'restricted'
2024-04-30 10:10:53,702 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2024-04-30 10:10:53,703 INFO [org.geoserver] - Loaded layer 'streams'
2024-04-30 10:10:53,712 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2024-04-30 10:10:53,713 INFO [org.geoserver] - Loaded layer 'roads'
2024-04-30 10:10:53,719 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2024-04-30 10:10:53,720 INFO [org.geoserver] - Loaded layer 'bugsites'
2024-04-30 10:10:53,730 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2024-04-30 10:10:53,732 INFO [org.geoserver] - Loaded layer 'archsites'
2024-04-30 10:10:53,734 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-04-30 10:10:53,745 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2024-04-30 10:10:53,747 INFO [org.geoserver] - Loaded layer 'sfdem'
2024-04-30 10:10:53,755 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-04-30 10:10:53,768 INFO [org.geoserver] - Loaded feature type 'states', enabled
2024-04-30 10:10:53,769 INFO [org.geoserver] - Loaded layer 'states'
2024-04-30 10:10:53,777 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-04-30 10:10:53,794 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2024-04-30 10:10:53,800 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2024-04-30 10:10:53,804 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2024-04-30 10:10:53,805 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2024-04-30 10:10:53,813 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2024-04-30 10:10:53,814 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2024-04-30 10:10:53,817 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2024-04-30 10:10:53,818 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2024-04-30 10:10:54,225 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-04-30 10:10:54,234 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-04-30 10:10:54,236 INFO [org.geoserver] - Loaded layer 'soil'
2024-04-30 10:10:54,243 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-04-30 10:10:54,245 INFO [org.geoserver] - Loaded layer 'apmc'
2024-04-30 10:10:54,248 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-04-30 10:10:54,250 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-04-30 10:10:54,252 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-04-30 10:10:54,253 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-04-30 10:10:54,255 INFO [org.geoserver] - Loaded feature type 'agro', enabled
2024-04-30 10:10:54,261 INFO [org.geoserver] - Loaded layer 'agro'
2024-04-30 10:10:54,265 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-04-30 10:10:54,267 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-04-30 10:10:54,287 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2024-04-30 10:10:54,293 INFO [org.geoserver] - Loaded layer group 'spearfish'
2024-04-30 10:10:54,295 INFO [org.geoserver] - Loaded layer group 'tasmania'
2024-04-30 10:10:54,300 INFO [org.geoserver] - Read catalog in 4.045 s
2024-04-30 10:10:54,472 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--2392f98a:18f2d4e41c7:-8000', enabled
2024-04-30 10:10:54,496 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-04-30 10:10:54,504 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-04-30 10:10:54,533 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-04-30 10:10:54,568 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-30 10:10:54,687 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-30 10:10:54,687 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-30 10:10:54,687 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-04-30 10:10:54,787 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-30 10:10:54,787 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-04-30 10:10:54,787 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-04-30 10:10:54,787 WARN [config.XMLConfiguration] - ********************************************************************************
2024-04-30 10:10:54,874 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-04-30 10:10:54,876 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-04-30 10:10:54,954 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-04-30 10:10:54,954 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-04-30 10:10:54,954 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-04-30 10:10:55,027 INFO [gwc.layer] - Loaded 28 tile layers in 71.77 ms
2024-04-30 10:10:55,044 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-04-30 10:10:55,054 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-30 10:10:55,058 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-04-30 10:10:55,058 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-04-30 10:10:55,198 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-04-30 10:10:55,877 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-30 10:10:55,892 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-04-30 10:10:55,896 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-30 10:10:55,913 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-04-30 10:10:55,917 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-04-30 10:10:55,917 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-04-30 10:10:55,919 INFO [diskquota.DiskQuotaMonitor] - 28 layers attached to global quota 500.0 MB
2024-04-30 10:10:56,002 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-04-30 10:10:56,324 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-04-30 10:10:56,349 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-04-30 10:10:56,350 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-04-30 10:10:56,508 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-04-30 10:10:56,509 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-04-30 10:11:01,249 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-04-30 10:11:01,330 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-04-30 10:11:03,513 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-04-30 10:11:03,520 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-04-30 10:11:03,716 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-04-30 10:11:03,719 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:05,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:08,490 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 10:11:08,490 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 10:11:08,495 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 10:11:08,495 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 10:11:08,619 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:08,620 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-30 10:11:08,620 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:08,725 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:09,888 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.93798828125 : 39.06201171875, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1462
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.93798828125,52.70947265625,39.06201171875,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1462, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:09,888 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.93798828125 : 39.06201171875, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1462
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.93798828125,52.70947265625,39.06201171875,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1462, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:10,644 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-30 10:11:11,022 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:11,226 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:11,837 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:15,006 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 10:11:15,039 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:15,679 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:15,807 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.93798828125 : 39.06201171875, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1462
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.93798828125,52.70947265625,39.06201171875,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1462, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:16,202 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.93798828125 : 39.06201171875, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1462
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.93798828125,52.70947265625,39.06201171875,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1462, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:16,446 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:16,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:11:16,646 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:16,814 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:18,286 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:18,580 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.93798828125 : 39.06201171875, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1462
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.93798828125,52.70947265625,39.06201171875,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1462, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:11:19,202 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:59:09,517 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:59:09,522 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:59:09,561 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:59:09,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:59:09,568 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 10:59:10,521 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:59:10,601 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:59:11,607 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:59:12,517 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 10:59:13,158 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[5.75146484375 : 40.24853515625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=5.75146484375,52.70947265625,40.24853515625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 11:01:26,401 INFO [geoserver.security] - Strong cryptography is available
2024-04-30 11:01:52,073 INFO [gwc.layer] - Truncating TileLayer for layer group 'tiger-ny' due to a change in its layers or styles
2024-04-30 11:01:52,075 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,075 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,093 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger_giant_polygon does not exist or is not writable
2024-04-30 11:01:52,127 INFO [gwc.layer] - Truncating TileLayer for layer group 'tiger-ny' due to a change in its layers or styles
2024-04-30 11:01:52,128 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,128 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,135 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger_poi does not exist or is not writable
2024-04-30 11:01:52,161 INFO [gwc.layer] - Truncating TileLayer for layer group 'tiger-ny' due to a change in its layers or styles
2024-04-30 11:01:52,161 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,161 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,169 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger_poly_landmarks does not exist or is not writable
2024-04-30 11:01:52,192 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger-ny does not exist or is not writable
2024-04-30 11:01:52,197 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.NullPointerException: Cannot invoke "org.geoserver.catalog.WorkspaceInfo.getName()" because the return value of "org.geoserver.catalog.LayerGroupInfo.getWorkspace()" is null
	at org.geoserver.security.SecuredResourceNameChangeListener.handleRemoveEvent(SecuredResourceNameChangeListener.java:62)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1738)
	at org.geoserver.catalog.impl.CatalogImpl.fireRemoved(CatalogImpl.java:1727)
	at org.geoserver.catalog.impl.CatalogImpl.removed(CatalogImpl.java:1679)
	at org.geoserver.catalog.impl.CatalogImpl.remove(CatalogImpl.java:1039)
	at org.geoserver.security.SecureCatalogImpl.remove(SecureCatalogImpl.java:1341)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.remove(AbstractFilteredCatalog.java:644)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.remove(AbstractCatalogDecorator.java:426)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.remove(LocalWorkspaceCatalog.java:418)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:288)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:135)
	at org.geoserver.catalog.impl.LayerInfoImpl.accept(LayerInfoImpl.java:272)
	at jdk.internal.reflect.GeneratedMethodAccessor325.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:128)
	at jdk.proxy3/jdk.proxy3.$Proxy36.accept(Unknown Source)
	at org.geoserver.web.data.SelectionRemovalLink$1.onSubmit(SelectionRemovalLink.java:69)
	at org.geoserver.web.wicket.GeoServerDialog.submit(GeoServerDialog.java:164)
	at org.geoserver.web.wicket.GeoServerDialog$4.onSubmit(GeoServerDialog.java:176)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-30 11:01:52,214 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tiger_tiger_roads does not exist or is not writable
2024-04-30 11:01:52,226 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/nurc_Arc_Sample does not exist or is not writable
2024-04-30 11:01:52,233 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/nurc_Img_Sample does not exist or is not writable
2024-04-30 11:01:52,248 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/nurc_Pk50095 does not exist or is not writable
2024-04-30 11:01:52,261 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/nurc_mosaic does not exist or is not writable
2024-04-30 11:01:52,273 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/topp_states does not exist or is not writable
2024-04-30 11:01:52,284 INFO [gwc.layer] - Truncating TileLayer for layer group 'tasmania' due to a change in its layers or styles
2024-04-30 11:01:52,284 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,284 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,292 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/topp_tasmania_cities does not exist or is not writable
2024-04-30 11:01:52,301 INFO [gwc.layer] - Truncating TileLayer for layer group 'tasmania' due to a change in its layers or styles
2024-04-30 11:01:52,301 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,301 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,307 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/topp_tasmania_roads does not exist or is not writable
2024-04-30 11:01:52,318 INFO [gwc.layer] - Truncating TileLayer for layer group 'tasmania' due to a change in its layers or styles
2024-04-30 11:01:52,318 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,321 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,324 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/topp_tasmania_state_boundaries does not exist or is not writable
2024-04-30 11:01:52,332 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/tasmania does not exist or is not writable
2024-04-30 11:01:52,335 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.NullPointerException: Cannot invoke "org.geoserver.catalog.WorkspaceInfo.getName()" because the return value of "org.geoserver.catalog.LayerGroupInfo.getWorkspace()" is null
	at org.geoserver.security.SecuredResourceNameChangeListener.handleRemoveEvent(SecuredResourceNameChangeListener.java:62)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1738)
	at org.geoserver.catalog.impl.CatalogImpl.fireRemoved(CatalogImpl.java:1727)
	at org.geoserver.catalog.impl.CatalogImpl.removed(CatalogImpl.java:1679)
	at org.geoserver.catalog.impl.CatalogImpl.remove(CatalogImpl.java:1039)
	at org.geoserver.security.SecureCatalogImpl.remove(SecureCatalogImpl.java:1341)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.remove(AbstractFilteredCatalog.java:644)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.remove(AbstractCatalogDecorator.java:426)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.remove(LocalWorkspaceCatalog.java:418)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:288)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:135)
	at org.geoserver.catalog.impl.LayerInfoImpl.accept(LayerInfoImpl.java:272)
	at jdk.internal.reflect.GeneratedMethodAccessor325.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:128)
	at jdk.proxy3/jdk.proxy3.$Proxy36.accept(Unknown Source)
	at org.geoserver.web.data.SelectionRemovalLink$1.onSubmit(SelectionRemovalLink.java:69)
	at org.geoserver.web.wicket.GeoServerDialog.submit(GeoServerDialog.java:164)
	at org.geoserver.web.wicket.GeoServerDialog$4.onSubmit(GeoServerDialog.java:176)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-30 11:01:52,341 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/topp_tasmania_water_bodies does not exist or is not writable
2024-04-30 11:01:52,351 INFO [gwc.layer] - Truncating TileLayer for layer group 'spearfish' due to a change in its layers or styles
2024-04-30 11:01:52,352 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,352 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,358 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_archsites does not exist or is not writable
2024-04-30 11:01:52,366 INFO [gwc.layer] - Truncating TileLayer for layer group 'spearfish' due to a change in its layers or styles
2024-04-30 11:01:52,366 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,366 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,373 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_bugsites does not exist or is not writable
2024-04-30 11:01:52,380 INFO [gwc.layer] - Truncating TileLayer for layer group 'spearfish' due to a change in its layers or styles
2024-04-30 11:01:52,381 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,381 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,385 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_restricted does not exist or is not writable
2024-04-30 11:01:52,395 INFO [gwc.layer] - Truncating TileLayer for layer group 'spearfish' due to a change in its layers or styles
2024-04-30 11:01:52,396 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,396 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,398 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_roads does not exist or is not writable
2024-04-30 11:01:52,410 INFO [gwc.layer] - Truncating TileLayer for layer group 'spearfish' due to a change in its layers or styles
2024-04-30 11:01:52,410 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,410 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,413 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_sfdem does not exist or is not writable
2024-04-30 11:01:52,423 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/spearfish does not exist or is not writable
2024-04-30 11:01:52,425 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.NullPointerException: Cannot invoke "org.geoserver.catalog.WorkspaceInfo.getName()" because the return value of "org.geoserver.catalog.LayerGroupInfo.getWorkspace()" is null
	at org.geoserver.security.SecuredResourceNameChangeListener.handleRemoveEvent(SecuredResourceNameChangeListener.java:62)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1738)
	at org.geoserver.catalog.impl.CatalogImpl.fireRemoved(CatalogImpl.java:1727)
	at org.geoserver.catalog.impl.CatalogImpl.removed(CatalogImpl.java:1679)
	at org.geoserver.catalog.impl.CatalogImpl.remove(CatalogImpl.java:1039)
	at org.geoserver.security.SecureCatalogImpl.remove(SecureCatalogImpl.java:1341)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.remove(AbstractFilteredCatalog.java:644)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.remove(AbstractCatalogDecorator.java:426)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.remove(LocalWorkspaceCatalog.java:418)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:288)
	at org.geoserver.catalog.CascadeDeleteVisitor.visit(CascadeDeleteVisitor.java:135)
	at org.geoserver.catalog.impl.LayerInfoImpl.accept(LayerInfoImpl.java:272)
	at jdk.internal.reflect.GeneratedMethodAccessor325.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:128)
	at jdk.proxy3/jdk.proxy3.$Proxy36.accept(Unknown Source)
	at org.geoserver.web.data.SelectionRemovalLink$1.onSubmit(SelectionRemovalLink.java:69)
	at org.geoserver.web.wicket.GeoServerDialog.submit(GeoServerDialog.java:164)
	at org.geoserver.web.wicket.GeoServerDialog$4.onSubmit(GeoServerDialog.java:176)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-30 11:01:52,428 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/sf_streams does not exist or is not writable
2024-04-30 11:01:52,441 INFO [file.FileBlobStore] - /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/temp/geowebcache/india_agro does not exist or is not writable
2024-04-30 11:01:54,710 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc-layers. Created: 0, removed: 23, modified: 0
2024-04-30 12:00:43,991 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:43,999 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-30 12:00:43,999 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:43,993 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:43,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:43,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,039 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-30 12:00:44,065 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:00:44,070 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:00:44,072 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:00:44,073 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:00:44,100 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:00:44,101 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,102 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,271 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:44,651 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:00:44,915 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:00:45,674 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:45,674 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:45,675 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:45,780 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:46,071 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:46,179 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:00:46,207 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:46,335 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:46,675 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:00:47,400 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:47,854 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:48,145 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:00:48,563 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:53,993 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:53,994 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:54,016 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:54,017 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:54,027 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:54,229 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.035650759935386 : 24.474127322435386, 69.32449686527252 : 73.76297342777252]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=20.035650759935386,69.32449686527252,24.474127322435386,73.76297342777252, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:00:54,278 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.035650759935386 : 24.474127322435386, 69.32449686527252 : 73.76297342777252]
 layers: india:india_state_1
 styles: state_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=20.035650759935386,69.32449686527252,24.474127322435386,73.76297342777252, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:00:54,278 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.035650759935386 : 24.474127322435386, 69.32449686527252 : 73.76297342777252]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=20.035650759935386,69.32449686527252,24.474127322435386,73.76297342777252, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:00:54,278 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.035650759935386 : 24.474127322435386, 69.32449686527252 : 73.76297342777252]
 layers: india:ind_district
 styles: district_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.035650759935386,69.32449686527252,24.474127322435386,73.76297342777252, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:00:54,279 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.035650759935386 : 24.474127322435386, 69.32449686527252 : 73.76297342777252]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.035650759935386,69.32449686527252,24.474127322435386,73.76297342777252, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:00:59,129 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:59,131 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:59,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:59,130 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:59,140 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:00:59,260 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 64.79042637348175 : 115.37148106098175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,64.79042637348175,47.054096043109894,115.37148106098175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:00:59,266 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 64.79042637348175 : 115.37148106098175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,64.79042637348175,47.054096043109894,115.37148106098175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:00,128 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 64.79042637348175 : 115.37148106098175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,64.79042637348175,47.054096043109894,115.37148106098175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:00,932 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 64.79042637348175 : 115.37148106098175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,64.79042637348175,47.054096043109894,115.37148106098175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:01,861 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 64.79042637348175 : 115.37148106098175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,64.79042637348175,47.054096043109894,115.37148106098175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:04,690 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:04,763 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[17.125278294086456 : 21.563754856586456, 73.90856909751892 : 78.34704566001892]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=17.125278294086456,73.90856909751892,21.563754856586456,78.34704566001892, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:01:05,270 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:05,858 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[13.611713230609894 : 47.054096043109894, 77.77626621723175 : 128.35732090473175]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=13.611713230609894,77.77626621723175,47.054096043109894,128.35732090473175, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:08,084 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:08,871 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.397262632846832 : 45.83964544534683, 60.821371257305145 : 111.40242594480515]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.397262632846832,60.821371257305145,45.83964544534683,111.40242594480515, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:09,856 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:09,906 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.11350589990616 : 24.55198246240616, 69.49936348199844 : 73.93784004449844]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.11350589990616,69.49936348199844,24.55198246240616,73.93784004449844, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:01:10,289 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:10,649 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.397262632846832 : 45.83964544534683, 73.80721110105515 : 124.38826578855515]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.397262632846832,73.80721110105515,45.83964544534683,124.38826578855515, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:01:16,355 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:16,714 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.705535643049988 : 45.119749505296284, 74.23579488070831 : 123.25085366255544]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.705535643049988,74.23579488070831,45.119749505296284,123.25085366255544, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-30 12:01:19,098 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:19,702 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.722804054000736 : 44.13701791624703, 65.65728093713557 : 114.67233971898273]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.722804054000736,65.65728093713557,44.13701791624703,114.67233971898273, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-30 12:01:21,417 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:22,116 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[8.714766059270428 : 41.128979921516716, 61.96721876558653 : 110.98227754743368]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1523
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=8.714766059270428,61.96721876558653,41.128979921516716,110.98227754743368, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1523, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-30 12:01:24,592 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:01:25,853 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[8.203970830975017 : 41.63977514981213, 61.96721876558653 : 110.98227754743368]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1571
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=8.203970830975017,61.96721876558653,41.63977514981213,110.98227754743368, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2303, HEIGHT=1571, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2303
2024-04-30 12:04:17,495 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,498 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:04:17,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,504 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:04:17,507 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,513 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,516 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:04:17,516 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,520 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:04:17,546 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 12:04:17,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,563 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,629 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,630 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:17,758 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-30 12:04:17,758 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-30 12:04:17,859 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:04:17,906 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:04:18,064 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:18,141 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:18,662 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:18,852 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:04:18,964 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:19,042 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:19,149 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:19,163 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:19,862 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:20,229 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:04:20,281 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:20,901 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 65.36572265625 : 90.63427734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,65.36572265625,39.72119140625,90.63427734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=1150, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 1150
2024-04-30 12:04:21,070 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:38,342 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:38,343 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:38,347 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:38,347 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:38,343 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:38,406 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.677620053291328 : 25.116096615791328, 69.47169917821884 : 73.91017574071884]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=20.677620053291328,69.47169917821884,25.116096615791328,73.91017574071884, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:38,408 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.677620053291328 : 25.116096615791328, 69.47169917821884 : 73.91017574071884]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=20.677620053291328,69.47169917821884,25.116096615791328,73.91017574071884, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:38,412 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.677620053291328 : 25.116096615791328, 69.47169917821884 : 73.91017574071884]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.677620053291328,69.47169917821884,25.116096615791328,73.91017574071884, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:38,419 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.677620053291328 : 25.116096615791328, 69.47169917821884 : 73.91017574071884]
 layers: india:ind_district
 styles: district_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.677620053291328,69.47169917821884,25.116096615791328,73.91017574071884, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:38,459 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.677620053291328 : 25.116096615791328, 69.47169917821884 : 73.91017574071884]
 layers: india:india_state_1
 styles: state_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=20.677620053291328,69.47169917821884,25.116096615791328,73.91017574071884, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:43,392 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:43,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:43,396 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:43,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:43,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:43,565 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.786203489461002 : 45.228586301961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.786203489461002,58.237354439210264,45.228586301961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:43,742 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.786203489461002 : 45.228586301961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.786203489461002,58.237354439210264,45.228586301961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:44,803 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.786203489461002 : 45.228586301961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.786203489461002,58.237354439210264,45.228586301961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:45,431 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.786203489461002 : 45.228586301961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.786203489461002,58.237354439210264,45.228586301961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:46,077 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.786203489461002 : 45.228586301961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.786203489461002,58.237354439210264,45.228586301961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:04:54,796 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:54,797 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:54,801 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:54,796 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:54,806 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:04:54,850 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.662013993420658 : 25.100490555920658, 70.08026478857931 : 74.51874135107931]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=20.662013993420658,70.08026478857931,25.100490555920658,74.51874135107931, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:54,853 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.662013993420658 : 25.100490555920658, 70.08026478857931 : 74.51874135107931]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=20.662013993420658,70.08026478857931,25.100490555920658,74.51874135107931, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:54,854 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.662013993420658 : 25.100490555920658, 70.08026478857931 : 74.51874135107931]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.662013993420658,70.08026478857931,25.100490555920658,74.51874135107931, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:54,863 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.662013993420658 : 25.100490555920658, 70.08026478857931 : 74.51874135107931]
 layers: india:ind_district
 styles: district_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=20.662013993420658,70.08026478857931,25.100490555920658,74.51874135107931, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:04:54,915 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.662013993420658 : 25.100490555920658, 70.08026478857931 : 74.51874135107931]
 layers: india:india_state_1
 styles: state_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=20.662013993420658,70.08026478857931,25.100490555920658,74.51874135107931, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 12:05:02,733 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:05:02,746 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:05:02,769 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:05:02,763 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:05:02,757 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 12:05:03,067 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.258859739461002 : 45.755930051961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.258859739461002,58.237354439210264,45.755930051961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:05:03,068 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.258859739461002 : 45.755930051961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.258859739461002,58.237354439210264,45.755930051961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:05:04,390 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.258859739461002 : 45.755930051961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.258859739461002,58.237354439210264,45.755930051961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:05:05,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.258859739461002 : 45.755930051961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.258859739461002,58.237354439210264,45.755930051961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 12:05:07,104 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[11.258859739461002 : 45.755930051961, 58.237354439210264 : 108.81840912671026]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1570
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=11.258859739461002,58.237354439210264,45.755930051961,108.81840912671026, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1570, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:15,835 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,893 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,837 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:15,936 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 13:01:15,937 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 13:01:15,939 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 13:01:15,941 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 13:01:16,005 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7b166496
2024-04-30 13:01:16,044 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:16,045 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:16,083 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:16,102 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:16,381 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:16,617 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:17,380 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-04-30 13:01:17,381 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-04-30 13:01:18,157 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:19,037 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:19,867 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-04-30 13:01:27,803 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:01:27,824 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.842380106449134 : 25.280856668949134, 70.38915950059891 : 74.82763606309891]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=20.842380106449134,70.38915950059891,25.280856668949134,74.82763606309891, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 13:02:36,396 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-04-30 13:02:36,424 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[21.062175065279014 : 25.500651627779014, 70.22460865974426 : 74.66308522224426]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=21.062175065279014,70.22460865974426,25.500651627779014,74.66308522224426, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-04-30 13:54:04,038 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-04-30 13:54:04,041 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-04-30 13:54:04,046 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-04-30 13:54:04,046 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-04-30 13:54:04,047 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-04-30 13:54:04,053 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-04-30 13:54:04,053 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-04-30 13:54:04,058 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-04-30 13:54:04,059 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-04-30 13:54:04,059 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-04-30 13:54:04,063 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-04-30 13:54:04,085 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@7bc7f594[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@2b77bc3] rejected from java.util.concurrent.ThreadPoolExecutor@351577f9[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-04-30 13:54:04,091 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-05-01 19:15:36,396 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-01 19:15:36,408 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-01 19:15:37,352 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-05-01 19:15:37,832 INFO [org.geoserver] - Loading catalog...
2024-05-01 19:15:37,967 INFO [org.geoserver] - Loaded style 'pophatch'
2024-05-01 19:15:37,969 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-05-01 19:15:37,970 INFO [org.geoserver] - Loaded style 'burg'
2024-05-01 19:15:37,971 INFO [org.geoserver] - Loaded style 'polygon'
2024-05-01 19:15:37,972 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-05-01 19:15:37,973 INFO [org.geoserver] - Loaded style 'poi'
2024-05-01 19:15:37,974 INFO [org.geoserver] - Loaded style 'population'
2024-05-01 19:15:37,975 INFO [org.geoserver] - Loaded style 'raster'
2024-05-01 19:15:37,976 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-05-01 19:15:37,977 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-05-01 19:15:38,000 INFO [org.geoserver] - Loaded style 'point'
2024-05-01 19:15:38,001 INFO [org.geoserver] - Loaded style 'dem'
2024-05-01 19:15:38,003 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-05-01 19:15:38,004 INFO [org.geoserver] - Loaded style 'restricted'
2024-05-01 19:15:38,005 INFO [org.geoserver] - Loaded style 'grass'
2024-05-01 19:15:38,010 INFO [org.geoserver] - Loaded style 'generic'
2024-05-01 19:15:38,011 INFO [org.geoserver] - Loaded style 'green'
2024-05-01 19:15:38,013 INFO [org.geoserver] - Loaded style 'capitals'
2024-05-01 19:15:38,014 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-05-01 19:15:38,015 INFO [org.geoserver] - Loaded style 'rain'
2024-05-01 19:15:38,016 INFO [org.geoserver] - Loaded style 'line'
2024-05-01 19:15:38,018 INFO [org.geoserver] - Loaded default workspace cite
2024-05-01 19:15:38,044 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-05-01 19:15:38,052 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-05-01 19:15:38,055 INFO [org.geoserver] - Loaded workspace 'cite'
2024-05-01 19:15:38,058 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-05-01 19:15:38,060 INFO [org.geoserver] - Loaded workspace 'sde'
2024-05-01 19:15:38,062 INFO [org.geoserver] - Loaded workspace 'india'
2024-05-01 19:15:38,074 INFO [org.geoserver] - Loaded style 'state_bound'
2024-05-01 19:15:38,076 INFO [org.geoserver] - Loaded style 'blue_point'
2024-05-01 19:15:38,078 INFO [org.geoserver] - Loaded style 'soil'
2024-05-01 19:15:38,079 INFO [org.geoserver] - Loaded style 'district_bound'
2024-05-01 19:15:38,080 INFO [org.geoserver] - Loaded workspace 'topp'
2024-05-01 19:15:38,083 INFO [org.geoserver] - Loaded workspace 'sf'
2024-05-01 19:15:38,684 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-05-01 19:15:38,700 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-05-01 19:15:38,704 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-05-01 19:15:38,706 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-05-01 19:15:39,141 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-05-01 19:15:39,155 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-05-01 19:15:39,158 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-05-01 19:15:39,167 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-05-01 19:15:39,175 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-05-01 19:15:39,544 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-05-01 19:15:40,865 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-05-01 19:15:40,884 INFO [org.geoserver] - Loaded layer 'soil'
2024-05-01 19:15:40,888 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-05-01 19:15:40,891 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-05-01 19:15:40,895 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-05-01 19:15:40,899 INFO [org.geoserver] - Loaded layer 'apmc'
2024-05-01 19:15:40,903 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-05-01 19:15:40,906 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-05-01 19:15:40,910 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-05-01 19:15:40,912 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-05-01 19:15:40,917 INFO [org.geoserver] - Read catalog in 3.083 s
2024-05-01 19:15:41,065 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-791513af:18f34675fc8:-8000', enabled
2024-05-01 19:15:41,082 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-05-01 19:15:41,090 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-05-01 19:15:41,115 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-05-01 19:15:41,150 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-01 19:15:41,239 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-01 19:15:41,239 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-01 19:15:41,239 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-01 19:15:41,302 WARN [config.XMLConfiguration] - ********************************************************************************
2024-05-01 19:15:41,302 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-05-01 19:15:41,302 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-05-01 19:15:41,302 WARN [config.XMLConfiguration] - ********************************************************************************
2024-05-01 19:15:41,361 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-05-01 19:15:41,365 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-05-01 19:15:41,419 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-05-01 19:15:41,419 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-05-01 19:15:41,420 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-05-01 19:15:41,448 INFO [gwc.layer] - Loaded 5 tile layers in 27.69 ms
2024-05-01 19:15:41,463 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-05-01 19:15:41,474 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-05-01 19:15:41,474 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-05-01 19:15:41,474 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-05-01 19:15:41,565 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-05-01 19:15:42,133 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-01 19:15:42,145 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-01 19:15:42,148 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-05-01 19:15:42,158 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-05-01 19:15:42,159 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-05-01 19:15:42,159 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-05-01 19:15:42,161 INFO [diskquota.DiskQuotaMonitor] - 5 layers attached to global quota 500.0 MB
2024-05-01 19:15:42,205 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-05-01 19:15:42,420 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-05-01 19:15:42,437 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-05-01 19:15:42,438 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-05-01 19:15:42,542 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-05-01 19:15:42,542 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-05-01 19:15:47,725 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-01 19:15:47,786 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-05-01 19:15:52,697 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-05-01 19:15:52,707 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-05-01 19:15:53,068 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-05-01 19:15:53,068 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-05-01 19:15:54,457 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:15:54,457 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:15:54,457 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:15:54,457 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-01 19:15:55,275 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-01 19:15:57,057 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:15:57,057 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:15:57,063 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:15:57,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:15:57,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:15:57,229 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:15:58,956 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:16:02,744 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:16:02,744 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:16:02,745 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:16:02,744 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:16:02,744 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:16:03,983 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:16:03,983 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:16:05,100 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:16:05,154 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:16:05,300 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:12,298 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,298 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,298 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,309 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,326 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:18:12,327 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:18:12,326 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:18:12,328 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:18:12,377 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,393 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:18:12,503 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,506 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,503 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,508 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,509 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:12,828 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-01 19:18:12,841 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-01 19:18:12,995 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:13,019 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:15,370 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:15,676 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:15,929 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:36,861 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:37,142 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.017842233181007 : 24.456318795681007, 69.0988774895668 : 73.5373540520668]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=20.017842233181007,69.0988774895668,24.456318795681007,73.5373540520668, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:18:37,903 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:38,742 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 73.3857421875 : 123.966796875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,73.3857421875,39.72119140625001,123.966796875, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:18:41,329 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:18:41,465 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[8.701395869255073 : 42.14377868175507, 86.60692173242569 : 137.1879764199257]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=8.701395869255073,86.60692173242569,42.14377868175507,137.1879764199257, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:22,052 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,054 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,061 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,064 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:19:22,056 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,067 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:19:22,069 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:19:22,070 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,078 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:19:22,082 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,083 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-01 19:19:22,084 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-01 19:19:22,086 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@3e7480c4
2024-05-01 19:19:22,085 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,108 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,158 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,161 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:22,337 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:22,350 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:23,470 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:23,563 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:24,008 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-01 19:19:29,995 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:29,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:29,998 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:30,003 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:30,010 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-01 19:19:30,047 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.645573079586036 : 24.084049642086036, 69.09222561120987 : 73.53070217370987]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=19.645573079586036,69.09222561120987,24.084049642086036,73.53070217370987, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:19:30,057 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.645573079586036 : 24.084049642086036, 69.09222561120987 : 73.53070217370987]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=19.645573079586036,69.09222561120987,24.084049642086036,73.53070217370987, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:19:30,059 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.645573079586036 : 24.084049642086036, 69.09222561120987 : 73.53070217370987]
 layers: india:ind_district
 styles: district_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=19.645573079586036,69.09222561120987,24.084049642086036,73.53070217370987, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:19:30,059 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.645573079586036 : 24.084049642086036, 69.09222561120987 : 73.53070217370987]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=19.645573079586036,69.09222561120987,24.084049642086036,73.53070217370987, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:19:30,090 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.645573079586036 : 24.084049642086036, 69.09222561120987 : 73.53070217370987]
 layers: india:india_state_1
 styles: state_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=19.645573079586036,69.09222561120987,24.084049642086036,73.53070217370987, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-01 19:19:42,439 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-05-01 19:19:42,440 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-05-01 19:19:42,441 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-05-01 19:19:42,442 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-05-01 19:19:42,442 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-05-01 19:19:42,456 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-05-01 19:19:42,456 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-05-01 19:19:42,457 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-05-01 19:19:42,458 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-05-01 19:19:42,458 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-05-01 19:19:42,458 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-05-01 19:19:42,479 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@75da066e[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@14c8a7f6] rejected from java.util.concurrent.ThreadPoolExecutor@25ce2400[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-05-01 19:19:42,484 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2024-05-02 10:44:23,753 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-02 10:44:23,771 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-02 10:44:25,196 INFO [org.geoserver] - GeoServer configuration lock is enabled
2024-05-02 10:44:25,667 INFO [org.geoserver] - Loading catalog...
2024-05-02 10:44:25,787 INFO [org.geoserver] - Loaded style 'pophatch'
2024-05-02 10:44:25,788 INFO [org.geoserver] - Loaded style 'giant_polygon'
2024-05-02 10:44:25,789 INFO [org.geoserver] - Loaded style 'simple_roads'
2024-05-02 10:44:25,790 INFO [org.geoserver] - Loaded style 'poi'
2024-05-02 10:44:25,791 INFO [org.geoserver] - Loaded style 'burg'
2024-05-02 10:44:25,792 INFO [org.geoserver] - Loaded style 'population'
2024-05-02 10:44:25,793 INFO [org.geoserver] - Loaded style 'polygon'
2024-05-02 10:44:25,794 INFO [org.geoserver] - Loaded style 'raster'
2024-05-02 10:44:25,794 INFO [org.geoserver] - Loaded style 'simple_streams'
2024-05-02 10:44:25,795 INFO [org.geoserver] - Loaded style 'restricted'
2024-05-02 10:44:25,795 INFO [org.geoserver] - Loaded style 'tiger_roads'
2024-05-02 10:44:25,796 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2024-05-02 10:44:25,816 INFO [org.geoserver] - Loaded style 'point'
2024-05-02 10:44:25,817 INFO [org.geoserver] - Loaded style 'dem'
2024-05-02 10:44:25,818 INFO [org.geoserver] - Loaded style 'grass'
2024-05-02 10:44:25,821 INFO [org.geoserver] - Loaded style 'generic'
2024-05-02 10:44:25,821 INFO [org.geoserver] - Loaded style 'green'
2024-05-02 10:44:25,822 INFO [org.geoserver] - Loaded style 'capitals'
2024-05-02 10:44:25,823 INFO [org.geoserver] - Loaded style 'rain'
2024-05-02 10:44:25,824 INFO [org.geoserver] - Loaded style 'line'
2024-05-02 10:44:25,825 INFO [org.geoserver] - Loaded style 'cite_lakes'
2024-05-02 10:44:25,828 INFO [org.geoserver] - Loaded default workspace cite
2024-05-02 10:44:25,852 INFO [org.geoserver] - Loaded workspace 'nurc'
2024-05-02 10:44:25,858 INFO [org.geoserver] - Loaded workspace 'cite'
2024-05-02 10:44:25,861 INFO [org.geoserver] - Loaded workspace 'tiger'
2024-05-02 10:44:25,863 INFO [org.geoserver] - Loaded workspace 'sde'
2024-05-02 10:44:25,865 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2024-05-02 10:44:25,867 INFO [org.geoserver] - Loaded workspace 'sf'
2024-05-02 10:44:25,869 INFO [org.geoserver] - Loaded workspace 'topp'
2024-05-02 10:44:25,871 INFO [org.geoserver] - Loaded workspace 'india'
2024-05-02 10:44:25,880 INFO [org.geoserver] - Loaded style 'soil'
2024-05-02 10:44:25,881 INFO [org.geoserver] - Loaded style 'blue_point'
2024-05-02 10:44:25,883 INFO [org.geoserver] - Loaded style 'state_bound'
2024-05-02 10:44:25,885 INFO [org.geoserver] - Loaded style 'district_bound'
2024-05-02 10:44:26,245 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2024-05-02 10:44:26,248 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2024-05-02 10:44:26,251 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2024-05-02 10:44:26,253 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2024-05-02 10:44:26,449 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2024-05-02 10:44:26,459 INFO [org.geoserver] - Loaded data store 'sf', enabled
2024-05-02 10:44:26,461 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2024-05-02 10:44:26,469 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2024-05-02 10:44:26,474 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2024-05-02 10:44:26,803 INFO [org.geoserver] - Loaded data store 'india', enabled
2024-05-02 10:44:28,294 INFO [org.geoserver] - Loaded feature type 'apmc', enabled
2024-05-02 10:44:28,317 INFO [org.geoserver] - Loaded layer 'apmc'
2024-05-02 10:44:28,321 INFO [org.geoserver] - Loaded feature type 'india_state_1', enabled
2024-05-02 10:44:28,324 INFO [org.geoserver] - Loaded layer 'india_state_1'
2024-05-02 10:44:28,329 INFO [org.geoserver] - Loaded feature type 'cold_st', enabled
2024-05-02 10:44:28,330 INFO [org.geoserver] - Loaded layer 'cold_st'
2024-05-02 10:44:28,333 INFO [org.geoserver] - Loaded feature type 'soil', enabled
2024-05-02 10:44:28,337 INFO [org.geoserver] - Loaded layer 'soil'
2024-05-02 10:44:28,341 INFO [org.geoserver] - Loaded feature type 'ind_district', enabled
2024-05-02 10:44:28,343 INFO [org.geoserver] - Loaded layer 'ind_district'
2024-05-02 10:44:28,347 INFO [org.geoserver] - Read catalog in 2.678 s
2024-05-02 10:44:28,505 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-78b3f803:18f37b9b518:-8000', enabled
2024-05-02 10:44:28,529 INFO [org.geoserver] - Loaded service 'wfs', enabled
2024-05-02 10:44:28,538 INFO [org.geoserver] - Loaded service 'wcs', enabled
2024-05-02 10:44:28,563 INFO [org.geoserver] - Loaded service 'wms', enabled
2024-05-02 10:44:28,601 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-02 10:44:28,689 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-02 10:44:28,690 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-02 10:44:28,690 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2024-05-02 10:44:28,753 WARN [config.XMLConfiguration] - ********************************************************************************
2024-05-02 10:44:28,753 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2024-05-02 10:44:28,754 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2024-05-02 10:44:28,754 WARN [config.XMLConfiguration] - ********************************************************************************
2024-05-02 10:44:28,839 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2024-05-02 10:44:28,841 INFO [config.XMLConfiguration] - Initializing layers from gwc
2024-05-02 10:44:28,906 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2024-05-02 10:44:28,906 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2024-05-02 10:44:28,906 INFO [gwc.layer] - Loading tile layers from gwc-layers
2024-05-02 10:44:28,933 INFO [gwc.layer] - Loaded 5 tile layers in 26.37 ms
2024-05-02 10:44:28,945 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2024-05-02 10:44:28,957 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-05-02 10:44:28,957 INFO [storage.DefaultStorageFinder] - *** Reverting to java.io.tmpdir null for storage. Please set GEOWEBCACHE_CACHE_DIR. ***
2024-05-02 10:44:28,958 INFO [storage.DefaultStorageFinder] - ***************************************************************************************
2024-05-02 10:44:29,088 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2024-05-02 10:44:29,681 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-02 10:44:29,691 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data/gwc'.
2024-05-02 10:44:29,695 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-05-02 10:44:29,705 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2024-05-02 10:44:29,706 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2024-05-02 10:44:29,707 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2024-05-02 10:44:29,709 INFO [diskquota.DiskQuotaMonitor] - 5 layers attached to global quota 500.0 MB
2024-05-02 10:44:29,756 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2024-05-02 10:44:30,008 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2024-05-02 10:44:30,029 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2024-05-02 10:44:30,030 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2024-05-02 10:44:30,150 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2024-05-02 10:44:30,151 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2024-05-02 10:44:38,174 INFO [geoserver.platform] - Falling back to embedded data directory: /Users/vatsalpatel/Desktop/mid/apache-tomcat-9.0.86/webapps/geoserver/data
2024-05-02 10:44:38,291 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2024-05-02 10:44:40,426 INFO [geoserver.security] - Start reloading user/groups for service named default
2024-05-02 10:44:40,435 INFO [geoserver.security] - Reloading user/groups successful for service named default
2024-05-02 10:44:40,708 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2024-05-02 10:44:40,709 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:42,186 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:50,493 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:44:50,493 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:44:50,524 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:44:50,525 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:44:50,623 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:44:50,629 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:50,631 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:50,687 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:52,555 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:44:52,555 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:44:53,615 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:44:55,078 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-02 10:44:57,620 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:44:57,674 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:44:57,731 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:44:58,462 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:18,467 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:18,469 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:18,472 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:18,478 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:18,483 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:19,186 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.927577853202827 : 24.366054415702827, 69.65154129266739 : 74.09001785516739]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=19.927577853202827,69.65154129266739,24.366054415702827,74.09001785516739, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 10:45:19,281 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.927577853202827 : 24.366054415702827, 69.65154129266739 : 74.09001785516739]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=19.927577853202827,69.65154129266739,24.366054415702827,74.09001785516739, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 10:45:19,281 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.927577853202827 : 24.366054415702827, 69.65154129266739 : 74.09001785516739]
 layers: india:ind_district
 styles: district_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=ind_district, REQUEST=GetFeatureInfo, BBOX=19.927577853202827,69.65154129266739,24.366054415702827,74.09001785516739, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=ind_district, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 10:45:19,462 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.927577853202827 : 24.366054415702827, 69.65154129266739 : 74.09001785516739]
 layers: india:india_state_1
 styles: state_bound
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=india_state_1, REQUEST=GetFeatureInfo, BBOX=19.927577853202827,69.65154129266739,24.366054415702827,74.09001785516739, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=india_state_1, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 10:45:20,001 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.927577853202827 : 24.366054415702827, 69.65154129266739 : 74.09001785516739]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=19.927577853202827,69.65154129266739,24.366054415702827,74.09001785516739, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 10:45:24,201 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:24,204 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:24,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:24,213 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:24,226 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:24,496 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.976882981966739 : 46.41926579446674, 69.11222557475679 : 119.69328026225679]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.976882981966739,69.11222557475679,46.41926579446674,119.69328026225679, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:24,543 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.976882981966739 : 46.41926579446674, 69.11222557475679 : 119.69328026225679]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.976882981966739,69.11222557475679,46.41926579446674,119.69328026225679, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:26,224 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.976882981966739 : 46.41926579446674, 69.11222557475679 : 119.69328026225679]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.976882981966739,69.11222557475679,46.41926579446674,119.69328026225679, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:26,514 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:26,521 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:26,547 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:26,655 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.018091078369523 : 45.46047389086952, 67.29116691371868 : 117.87222160121868]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.018091078369523,67.29116691371868,45.46047389086952,117.87222160121868, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:26,763 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:26,946 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.018091078369523 : 45.46047389086952, 67.29116691371868 : 117.87222160121868]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.018091078369523,67.29116691371868,45.46047389086952,117.87222160121868, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:27,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:45:31,087 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.976882981966739 : 46.41926579446674, 69.11222557475679 : 119.69328026225679]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.976882981966739,69.11222557475679,46.41926579446674,119.69328026225679, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:32,368 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.018091078369523 : 45.46047389086952, 67.29116691371868 : 117.87222160121868]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.018091078369523,67.29116691371868,45.46047389086952,117.87222160121868, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:33,238 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.018091078369523 : 45.46047389086952, 67.29116691371868 : 117.87222160121868]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.018091078369523,67.29116691371868,45.46047389086952,117.87222160121868, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:33,781 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.976882981966739 : 46.41926579446674, 69.11222557475679 : 119.69328026225679]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.976882981966739,69.11222557475679,46.41926579446674,119.69328026225679, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:45:34,555 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[12.018091078369523 : 45.46047389086952, 67.29116691371868 : 117.87222160121868]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=12.018091078369523,67.29116691371868,45.46047389086952,117.87222160121868, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:07,057 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:07,830 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.106736821870328 : 39.54911963437033, 57.54686642775613 : 108.12792111525613]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.106736821870328,57.54686642775613,39.54911963437033,108.12792111525613, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:09,542 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:09,610 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.106736821870328 : 39.54911963437033, 57.54686642775613 : 108.12792111525613]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.106736821870328,57.54686642775613,39.54911963437033,108.12792111525613, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:12,668 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:12,705 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.106736821870328 : 39.54911963437033, 57.54686642775613 : 108.12792111525613]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.106736821870328,57.54686642775613,39.54911963437033,108.12792111525613, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:17,586 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:18,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.106736821870328 : 39.54911963437033, 57.54686642775613 : 108.12792111525613]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.106736821870328,57.54686642775613,39.54911963437033,108.12792111525613, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:20,935 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:21,716 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.106736821870328 : 39.54911963437033, 57.54686642775613 : 108.12792111525613]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.106736821870328,57.54686642775613,39.54911963437033,108.12792111525613, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:35,336 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:46:35,674 INFO [geoserver.wfs] - 
Request: describeFeatureType
    service = WFS
    version = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    typeName[0] = {www.india.com}ind_district
    outputFormat = text/xml; subtype=gml/3.1.1
2024-05-02 10:46:44,533 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:46:44,655 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy63.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-05-02 10:46:44,667 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:46:44,672 ERROR [geoserver.ows] - 
java.lang.IllegalArgumentException: Unsupported class file major version 61
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:196)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:177)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:163)
	at org.springframework.asm.ClassReader.<init>(ClassReader.java:284)
	at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:68)
	at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1241)
	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:726)
	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)
	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:358)
	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:585)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:110)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:108)
	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)
	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)
	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134)
	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319)
	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572)
	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:406)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:829)
	at org.geoserver.wfs.DefaultWebFeatureService.getFeature(DefaultWebFeatureService.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy63.getFeature(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:876)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:670)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:346)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-05-02 10:46:47,275 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,288 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:47,313 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,318 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:47,322 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,325 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:47,327 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,333 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,336 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:47,337 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,353 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:47,389 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,392 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,398 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,398 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:47,490 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:47,539 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:46:47,540 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-02 10:46:47,796 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:48,570 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:49,224 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:50,276 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:53,547 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,552 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,556 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,555 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,561 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:53,553 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,553 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,566 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:53,553 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:53,567 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:53,576 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,577 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 10:46:53,578 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,579 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,584 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 10:46:53,705 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 10:46:53,708 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-02 10:46:53,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:54,104 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:55,667 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:56,479 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:46:57,812 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 10:48:32,815 INFO [geoserver.security] - Strong cryptography is available
2024-05-02 11:43:51,239 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:43:51,608 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[21.121548444032676 : 25.560025006532676, 70.60447919368744 : 75.04295575618744]
 layers: india:apmc
 styles: blue_point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@333b259]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=apmc, REQUEST=GetFeatureInfo, BBOX=21.121548444032676,70.60447919368744,25.560025006532676,75.04295575618744, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=apmc, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 11:44:10,010 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:44:10,045 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[20.815413177013404 : 25.253889739513404, 70.63985216617584 : 75.07832872867584]
 layers: india:cold_st
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@34acf888]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=cold_st, REQUEST=GetFeatureInfo, BBOX=20.815413177013404,70.63985216617584,25.253889739513404,75.07832872867584, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=cold_st, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 11:45:36,408 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:45:36,451 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_xml
	ExcludeNodataResults = false
	FeatureCount = 1
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.3.0
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[19.823333799839027 : 24.261810362339027, 69.03538691997528 : 73.47386348247528]
 layers: india:soil
 styles: generic
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@430d71f]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CRS=EPSG:4326, I=50, STYLES=, J=50, WIDTH=101, HEIGHT=101, LAYERS=soil, REQUEST=GetFeatureInfo, BBOX=19.823333799839027,69.03538691997528,24.261810362339027,73.47386348247528, VERSION=1.3.0, SERVICE=WMS, QUERY_LAYERS=soil, TRANSPARENT=true}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.3.0
	XPixel = 50
	YPixel = 50
2024-05-02 11:45:37,258 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:45:37,833 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.278808593750007 : 39.72119140625001, 73.341796875 : 123.9228515625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.278808593750007,73.341796875,39.72119140625001,123.9228515625, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 11:46:20,317 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,321 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,320 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,320 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,329 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,320 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,347 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Layers = [SimpleFeatureTypeImpl www.india.com:apmc identified extends Feature(gid:gid,sr. no:sr. no,name and c:name and c,name of ma:name of ma,landline o:landline o,mobile num:mobile num,e-mail add:e-mail add,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=apmc, name=www.india.com:apmc styleName=blue_point, title=apmc, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=apmc}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 11:46:20,347 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Layers = [SimpleFeatureTypeImpl www.india.com:cold_st identified extends Feature(gid:gid,s. no.:s. no.,name & add:name & add,capacity i:capacity i,sector:sector,products s:products s,latitude:latitude,longitude:longitude,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=cold_st, name=www.india.com:cold_st styleName=point, title=cold_st, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=cold_st}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 11:46:20,347 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Layers = [SimpleFeatureTypeImpl www.india.com:india_state_1 identified extends Feature(gid:gid,premiumdat:premiumdat,objectid:objectid,id:id,name:name,country:country,censusname:censusname,statename_:statename_,lgd_staten:lgd_staten,lgd_statec:lgd_statec,censuscode:censuscode,censusco_1:censusco_1,censusco_2:censusco_2,level:level,tru:tru,no_hh:no_hh,tot_p:tot_p,avghhsz_cy:avghhsz_cy,st_areasha:st_areasha,st_lengths:st_lengths,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=india_state_1, name=www.india.com:india_state_1 styleName=state_bound, title=india_state_1, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=india_state_1}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 11:46:20,347 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Layers = [SimpleFeatureTypeImpl www.india.com:ind_district identified extends Feature(gid:gid,dtname:dtname,stname:stname,stcode11:stcode11,dtcode11:dtcode11,year_stat:year_stat,shape_leng:shape_leng,shape_area:shape_area,objectid:objectid,test:test,dist_lgd:dist_lgd,state_lgd:state_lgd,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=ind_district, name=www.india.com:ind_district styleName=district_bound, title=ind_district, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=ind_district}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 11:46:20,353 INFO [geoserver.wfs] - 
Request: getServiceInfo
2024-05-02 11:46:20,355 INFO [geoserver.wfs] - 
Request: getCapabilities
    baseUrl = http://localhost:8080/geoserver/
    service = WFS
2024-05-02 11:46:20,370 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,371 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,388 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,404 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Layers = [SimpleFeatureTypeImpl www.india.com:soil identified extends Feature(gid:gid,snum:snum,faosoil:faosoil,domsoi:domsoi,phase1:phase1,phase2:phase2,misclu1:misclu1,misclu2:misclu2,permafrost:permafrost,cntcode:cntcode,cntname:cntname,sqkm:sqkm,country:country,url:url,n:n,p:p,k:k,temp:temp,humid:humid,ph:ph,rain:rain,geom:geom)]
	LegendOptions = {}
	Legends = [LegendRequest [layer=soil, name=www.india.com:soil styleName=generic, title=soil, legendInfo=null]]
	Locale = null
	RawKvp = {REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, WIDTH=20, HEIGHT=20, LAYER=soil}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = true
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@7e3cda3a
2024-05-02 11:46:20,445 INFO [geoserver.wms] - 
Request: getServiceInfo
2024-05-02 11:46:20,546 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@333b259]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:apmc}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=blue_point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 11:46:20,837 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@34acf888]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:cold_st}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 11:46:21,961 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@430d71f]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:soil}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=generic]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 11:46:22,344 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@19b9b490]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:ind_district}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=district_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 11:46:22,593 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6.27880859375 : 39.72119140625, 52.70947265625 : 103.29052734375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {DPI=180}
	Get = true
	Height = 1522
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@2a7bfec9]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, CRS=EPSG:4326, FORMAT_OPTIONS=dpi:180, BBOX=6.27880859375,52.70947265625,39.72119140625,103.29052734375, VERSION=1.3.0, STYLES=, SERVICE=WMS, WIDTH=2302, HEIGHT=1522, TRANSPARENT=true, LAYERS=india:india_state_1}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=state_bound]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 2302
2024-05-02 16:00:17,908 INFO [georss.GeoRSSPoller] - destroy() invoked
2024-05-02 16:00:17,923 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2024-05-02 16:00:17,938 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2024-05-02 16:00:17,938 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2024-05-02 16:00:17,938 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2024-05-02 16:00:17,960 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2024-05-02 16:00:17,961 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2024-05-02 16:00:18,014 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2024-05-02 16:00:18,016 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2024-05-02 16:00:18,018 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2024-05-02 16:00:18,023 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2024-05-02 16:00:18,050 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@1ec7ba02[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@7569e26e] rejected from java.util.concurrent.ThreadPoolExecutor@1f79a6f0[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2024-05-02 16:00:18,057 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
